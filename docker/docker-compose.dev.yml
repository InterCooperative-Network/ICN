version: "3.8"

services:
  # PostgreSQL database service
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - ../data/db:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-icnuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-icnpass}
      POSTGRES_DB: ${POSTGRES_DB:-icndb}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-icnuser} -d ${POSTGRES_DB:-icndb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    networks:
      - icn-network

  # Backend service - Development mode with hot reloading
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend.Dockerfile
      target: development
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "${BACKEND_API_PORT:-8081}:8081"
      - "9229:9229"  # For debugging
    volumes:
      - ../backend:/usr/src/app/backend:cached
      - ../crates:/usr/src/app/crates
      - backend_cache:/usr/local/cargo/registry
      - target_cache:/usr/src/app/target
      - backend_logs:/logs
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-icnuser}:${POSTGRES_PASSWORD:-icnpass}@db:5432/${POSTGRES_DB:-icndb}
      - RUST_LOG=${RUST_LOG:-debug}
      - RUST_BACKTRACE=1
      - CARGO_BUILD_TARGET_DIR=/usr/src/app/target
    command: ["cargo", "watch", "-x", "run --bin icn-backend"]
    networks:
      - icn-network

  # Frontend service - Development mode with hot reloading
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend.Dockerfile
      target: development
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
      - "35729:35729"  # For live reload
    volumes:
      - ../frontend:/app:cached
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:${BACKEND_API_PORT:-8081}/api
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true  # Enable polling for Windows/WSL
    command: ["npm", "run", "dev"]
    networks:
      - icn-network

  bootstrap:
    build:
      context: ../backend
      dockerfile: ../docker/backend.Dockerfile
      target: development
    volumes:
      - ../data/bootstrap:/data
      - ../logs:/logs
    environment:
      - NODE_TYPE=bootstrap
      - NODE_PORT=${BOOTSTRAP_NODE_PORT:-9000}
      - API_PORT=${BOOTSTRAP_API_PORT:-8082}
      - BOOTSTRAP_NODES=[]
      - DATABASE_URL=postgres://${POSTGRES_USER:-icnuser}:${POSTGRES_PASSWORD:-icnpass}@db:5432/${POSTGRES_DB:-icndb}
    ports:
      - "${BOOTSTRAP_NODE_PORT:-9000}:9000"
      - "${BOOTSTRAP_API_PORT:-8082}:8082"
    depends_on:
      - db
    networks:
      - icn-network

volumes:
  db_data:
    name: icn_dev_db_data
  cargo_cache:
    name: icn_dev_cargo_cache
  target_cache:
    name: icn_dev_target_cache
  backend_logs:
    name: icn_dev_backend_logs
  backend_cache:

networks:
  icn-network:
    driver: bridge
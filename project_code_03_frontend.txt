Project Code Dump - 03_frontend - Generated Mon Mar 10 03:54:12 UTC 2025
=========================================================

LLM Context Information
======================
This is a distributed cooperative network system with the following key components:

Core Components:
- Backend: Rust-based node implementation
- Frontend: TypeScript/React web interface
- Contracts: Smart contracts for cooperative governance

Architecture Overview:
- Blockchain: Handles consensus and state management
- Identity: DID-based identity management
- Relationship: Tracks member interactions and relationships
- Reputation: Manages trust and reputation scores
- Governance: Handles proposals and voting
- WebSocket: Real-time communication layer

Note: This is file 03 of a multi-file dump.
All dependency directories are excluded from these dumps.
======================

===================
File: ./frontend/src/App.tsx
Size: 486 bytes
===================
```tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { NodeDashboard } from './components/nodes/NodeDashboard';
import { Layout } from './components/layout/Layout';

function App() {
  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<NodeDashboard />} />
          {/* Add other routes as they are implemented */}
        </Routes>
      </Layout>
    </Router>
  );
}

export default App;```

===================
File: ./frontend/src/components/authentication/Authentication.tsx
Size: 1808 bytes
===================
```tsx
// Define missing types
interface AuthResponse {
  did: string;
  challenge: string;
}

interface ZKProof {
  proof: string;
  publicSignals: string[];
}

interface Session {
  did: string;
  token: string;
}

// Add methods to initiate DID authentication, verify credentials, and establish a session
const initiateDIDAuth = async (): Promise<AuthResponse> => {
  try {
    const response = await fetch('http://localhost:8081/api/auth/initiate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Failed to initiate DID authentication');
    }

    return await response.json();
  } catch (error) {
    console.error('Error initiating DID authentication:', error);
    throw error;
  }
};

const verifyCredentials = async (proof: ZKProof): Promise<boolean> => {
  try {
    const response = await fetch('http://localhost:8081/api/auth/verify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(proof)
    });

    if (!response.ok) {
      throw new Error('Failed to verify credentials');
    }

    return await response.json();
  } catch (error) {
    console.error('Error verifying credentials:', error);
    throw error;
  }
};

const establishSession = async (did: string): Promise<Session> => {
  try {
    const response = await fetch('http://localhost:8081/api/auth/session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ did })
    });

    if (!response.ok) {
      throw new Error('Failed to establish session');
    }

    return await response.json();
  } catch (error) {
    console.error('Error establishing session:', error);
    throw error;
  }
};```

===================
File: ./frontend/src/components/community/CommunityDashboard.tsx
Size: 7632 bytes
===================
```tsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { AlertCircle, Users, Activity, BarChart3 } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FixedSizeList as List } from 'react-window';
import ReputationDashboard from '../reputation/ReputationDashboard';

const ResourceRow = ({ index, style, data }) => {
  const resource = data[index];
  return (
    <div style={style}>
      <div className="flex justify-between text-sm mb-2">
        <span>{resource.name}</span>
        <span>{resource.utilization}%</span>
      </div>
      <Progress value={resource.utilization} className="h-2" />
    </div>
  );
};

const CommunityDashboard = () => {
  const [metrics, setMetrics] = useState({
    totalMembers: 0,
    activePolicies: 0,
    resourceUtilization: 0,
    monthlyActivity: [],
    reputationCategories: {
      governance: 0,
      resourceSharing: 0,
      technicalContributions: 0
    }
  });
  
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Mock data - replace with actual API calls
    const mockData = {
      totalMembers: 156,
      activePolicies: 3,
      resourceUtilization: 78,
      monthlyActivity: [
        { month: 'Jan', activity: 65 },
        { month: 'Feb', activity: 75 },
        { month: 'Mar', activity: 85 },
        { month: 'Apr', activity: 90 }
      ],
      reputationCategories: {
        governance: 120,
        resourceSharing: 80,
        technicalContributions: 95
      }
    };

    setMetrics(mockData);
    setLoading(false);
  }, []);

  const resourceAllocation = [
    { name: 'Computing Resources', utilization: 75 },
    { name: 'Storage Resources', utilization: 60 },
    { name: 'Network Resources', utilization: 85 }
  ];

  const getListHeight = useCallback(() => {
    return Math.min(window.innerHeight * 0.4, 400);
  }, []);

  return (
    <div className="container mx-auto p-4 space-y-6">
      <Tabs defaultValue="overview">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="reputation">Reputation</TabsTrigger>
        </TabsList>
        <TabsContent value="overview">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">Total Members</p>
                    <h3 className="text-2xl font-bold">{metrics.totalMembers}</h3>
                  </div>
                  <Users className="h-8 w-8 text-blue-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">Active Policies</p>
                    <h3 className="text-2xl font-bold">{metrics.activePolicies}</h3>
                  </div>
                  <AlertCircle className="h-8 w-8 text-green-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">Resource Utilization</p>
                    <h3 className="text-2xl font-bold">{metrics.resourceUtilization}%</h3>
                  </div>
                  <Activity className="h-8 w-8 text-purple-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">Monthly Growth</p>
                    <h3 className="text-2xl font-bold">+12%</h3>
                  </div>
                  <BarChart3 className="h-8 w-8 text-orange-500" />
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Community Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={metrics.monthlyActivity}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="activity" 
                      stroke="#8884d8"
                      strokeWidth={2}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Resource Allocation</CardTitle>
            </CardHeader>
            <CardContent>
              <List
                height={getListHeight()}
                itemCount={resourceAllocation.length}
                itemSize={60}
                width="100%"
                itemData={resourceAllocation}
              >
                {ResourceRow}
              </List>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Reputation Categories</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Governance</span>
                    <span>{metrics.reputationCategories.governance}</span>
                  </div>
                  <Progress value={metrics.reputationCategories.governance} className="h-2" />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Resource Sharing</span>
                    <span>{metrics.reputationCategories.resourceSharing}</span>
                  </div>
                  <Progress value={metrics.reputationCategories.resourceSharing} className="h-2" />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Technical Contributions</span>
                    <span>{metrics.reputationCategories.technicalContributions}</span>
                  </div>
                  <Progress value={metrics.reputationCategories.technicalContributions} className="h-2" />
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="reputation">
          <ReputationDashboard />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CommunityDashboard;
```

===================
File: ./frontend/src/components/consensus/ConsensusMonitor.tsx
Size: 6532 bytes
===================
```tsx
import React, { useEffect, useRef, useState } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';

type ConsensusStatus = 'Proposing' | 'Voting' | 'Finalizing' | 'Completed' | 'Failed';

interface ConsensusUpdate {
  round_number: number;
  status: ConsensusStatus;
  coordinator: string;
  votes_count: number;
}

interface BlockFinalized {
  block_number: number;
  transactions_count: number;
  timestamp: number;
}

interface ReputationUpdate {
  did: string;
  change: number;
  new_total: number;
  category: string; // Added category field
}

interface ErrorMessage {
  code: string;
  message: string;
}

interface WebSocketMessage {
  type: 'ConsensusUpdate' | 'BlockFinalized' | 'ReputationUpdate' | 'Error';
  data: ConsensusUpdate | BlockFinalized | ReputationUpdate | ErrorMessage;
}

const ConsensusMonitor: React.FC = () => {
  const [messages, setMessages] = useState<WebSocketMessage[]>([]);
  const [connected, setConnected] = useState(false);
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    // Get DID from local storage or context
    const did = localStorage.getItem('userDid') || 'default-did';

    const connectWebSocket = () => {
      if (!wsRef.current) {
        try {
          wsRef.current = new WebSocket('ws://localhost:8080/ws');
          
          wsRef.current.onopen = () => {
            setConnected(true);
            // Send DID in a message after connection
            wsRef.current?.send(JSON.stringify({ type: 'identify', did }));
          };

          wsRef.current.onmessage = (event) => {
            try {
              const message: WebSocketMessage = JSON.parse(event.data);
              setMessages((prev) => [...prev, message].slice(-5)); // Keep last 5 messages
            } catch (e) {
              console.error('Failed to parse WebSocket message:', e);
            }
          };

          wsRef.current.onclose = () => {
            setConnected(false);
            wsRef.current = null;
            // Try to reconnect after 5 seconds
            setTimeout(connectWebSocket, 5000);
          };

          wsRef.current.onerror = (error) => {
            console.error('WebSocket error:', error);
            if (wsRef.current) {
              wsRef.current.close();
              wsRef.current = null;
            }
          };
        } catch (error) {
          console.error('Failed to establish WebSocket connection:', error);
          setTimeout(connectWebSocket, 5000);
        }
      }
    };

    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }
    };
  }, []);

  const renderConsensusUpdate = (data: ConsensusUpdate) => (
    <Card className="mb-4">
      <CardContent className="pt-6">
        <div className="flex justify-between items-start mb-2">
          <p className="font-medium">Consensus Round {data.round_number}</p>
          <Badge variant={
            data.status === 'Completed' ? 'default' :
            data.status === 'Failed' ? 'destructive' :
            'secondary'
          }>
            {data.status}
          </Badge>
        </div>
        <p className="text-sm text-gray-600">Coordinator: {data.coordinator}</p>
        <p className="text-sm text-gray-600">Votes: {data.votes_count}</p>
      </CardContent>
    </Card>
  );

  const renderBlockFinalized = (data: BlockFinalized) => (
    <Card className="mb-4">
      <CardContent className="pt-6">
        <div className="flex justify-between items-start mb-2">
          <p className="font-medium">New Block #{data.block_number}</p>
          <Badge>Finalized</Badge>
        </div>
        <p className="text-sm text-gray-600">Transactions: {data.transactions_count}</p>
        <p className="text-sm text-gray-600">
          Time: {new Date(data.timestamp * 1000).toLocaleString()}
        </p>
      </CardContent>
    </Card>
  );

  const renderReputationUpdate = (data: ReputationUpdate) => (
    <Card className="mb-4">
      <CardContent className="pt-6">
        <div className="flex justify-between items-start mb-2">
          <p className="font-medium">Reputation Change</p>
          <Badge variant={data.change > 0 ? 'default' : 'destructive'}>
            {data.change > 0 ? '+' : ''}{data.change}
          </Badge>
        </div>
        <p className="text-sm text-gray-600">DID: {data.did}</p>
        <p className="text-sm text-gray-600">New Total: {data.new_total}</p>
        <p className="text-sm text-gray-600">Category: {data.category}</p> {/* Display category */}
      </CardContent>
    </Card>
  );

  const renderMessage = (message: WebSocketMessage) => {
    switch (message.type) {
      case 'ConsensusUpdate':
        return renderConsensusUpdate(message.data as ConsensusUpdate);
      case 'BlockFinalized':
        return renderBlockFinalized(message.data as BlockFinalized);
      case 'ReputationUpdate':
        return renderReputationUpdate(message.data as ReputationUpdate);
      case 'Error':
        const errorData = message.data as ErrorMessage;
        return (
          <Alert variant="destructive" className="mb-4">
            <AlertDescription>
              Error {errorData.code}: {errorData.message}
            </AlertDescription>
          </Alert>
        );
      default:
        return null;
    }
  };

  return (
    <div className="space-y-4 p-4">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Consensus Monitor</CardTitle>
            <Badge variant={connected ? "default" : "destructive"}>
              {connected ? 'Connected' : 'Disconnected'}
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {messages.map((msg, i) => (
              <div key={i}>{renderMessage(msg)}</div>
            ))}
            {messages.length === 0 && (
              <p className="text-gray-500 text-center py-4">
                No consensus updates yet
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ConsensusMonitor;
```

===================
File: ./frontend/src/components/cooperative/CooperativeDashboard.tsx
Size: 5014 bytes
===================
```tsx
import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { AlertCircle, Users, Activity, BarChart3 } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const CooperativeDashboard = () => {
  const [metrics, setMetrics] = useState({
    totalMembers: 0,
    activeProposals: 0,
    resourceUtilization: 0,
    monthlyActivity: []
  });
  
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Mock data - replace with actual API calls
    const mockData = {
      totalMembers: 156,
      activeProposals: 3,
      resourceUtilization: 78,
      monthlyActivity: [
        { month: 'Jan', activity: 65 },
        { month: 'Feb', activity: 75 },
        { month: 'Mar', activity: 85 },
        { month: 'Apr', activity: 90 }
      ]
    };

    setMetrics(mockData);
    setLoading(false);
  }, []);

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Total Members</p>
                <h3 className="text-2xl font-bold">{metrics.totalMembers}</h3>
              </div>
              <Users className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Active Proposals</p>
                <h3 className="text-2xl font-bold">{metrics.activeProposals}</h3>
              </div>
              <AlertCircle className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Resource Utilization</p>
                <h3 className="text-2xl font-bold">{metrics.resourceUtilization}%</h3>
              </div>
              <Activity className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Monthly Growth</p>
                <h3 className="text-2xl font-bold">+12%</h3>
              </div>
              <BarChart3 className="h-8 w-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Cooperative Activity</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={metrics.monthlyActivity}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="activity" 
                  stroke="#8884d8"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Resource Allocation</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span>Computing Resources</span>
                <span>75%</span>
              </div>
              <Progress value={75} className="h-2" />
            </div>
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span>Storage Resources</span>
                <span>60%</span>
              </div>
              <Progress value={60} className="h-2" />
            </div>
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span>Network Resources</span>
                <span>85%</span>
              </div>
              <Progress value={85} className="h-2" />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default CooperativeDashboard;```

===================
File: ./frontend/src/components/governance/GovernanceDashboard.tsx
Size: 19823 bytes
===================
```tsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Alert, AlertDescription } from '../../components/ui/alert';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';
import { Progress } from '../../components/ui/progress';
import { AlertCircle, ChevronRight, Users, TrendingUp } from 'lucide-react';
import { Dialog, DialogOverlay, DialogContent } from '@reach/dialog';
import '@reach/dialog/styles.css';
import { FixedSizeList as List } from 'react-window';
import ProposalCard from '../governance/ProposalCard';

// Define missing types
interface FederationParams {
  name: string;
  description: string;
  resourcePolicy: {
    cpu: { min: number; max: number };
    memory: { min: number; max: number };
  };
}

interface MembershipProof {
  memberId: string;
  signature: string;
}

type Proposal = {
  id: string
  title: string
  description: string
  status: 'active' | 'passed' | 'rejected'
  votesFor: number
  votesAgainst: number
  quorum: number
  createdBy: string
  endsAt: string
  totalVoters: number
  delegatedVotes: number
}

type VotingStats = {
  totalProposals: number
  activeProposals: number
  participationRate: number
  monthlyVotes: Array<{ month: string; votes: number }>
}

type ReputationUpdate = {
  did: string
  change: number
  newTotal: number
  category: string // Added category field
}

type WebSocketMessage = {
  type: 'ProposalUpdate' | 'VoteUpdate' | 'ReputationUpdate'
  data: Proposal | ReputationUpdate
}

const ProposalRow = ({ index, style, data }: { index: number, style: React.CSSProperties, data: Proposal[] }) => {
  const proposal = data[index]
  return (
    <div style={style}>
      <ProposalCard proposal={proposal} />
    </div>
  )
}

const GovernanceDashboard = () => {
  const [proposals, setProposals] = useState<Proposal[]>([])
  const [votingStats, setVotingStats] = useState<VotingStats>({
    totalProposals: 0,
    activeProposals: 0,
    participationRate: 0,
    monthlyVotes: []
  })
  const [selectedTab, setSelectedTab] = useState('active')
  const [loading, setLoading] = useState(true)
  const [reputationUpdates, setReputationUpdates] = useState<ReputationUpdate[]>([])
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [newProposal, setNewProposal] = useState({ title: '', description: '' })
  const [formErrors, setFormErrors] = useState({ title: '', description: '' })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const wsRef = useRef<WebSocket | null>(null)
  const listRef = useRef(null)
  const getListHeight = useCallback(() => {
    return Math.min(window.innerHeight * 0.6, proposals.length * 200)
  }, [proposals.length])

  useEffect(() => {
    // Mock data - replace with actual API calls
    const mockProposals: Proposal[] = [
      {
        id: '1',
        title: 'Community Resource Allocation Q3',
        description: 'Proposal to allocate community resources for Q3 projects',
        status: 'active',
        votesFor: 750,
        votesAgainst: 250,
        quorum: 1000,
        createdBy: 'did:icn:alice',
        endsAt: '2024-11-01',
        totalVoters: 1500,
        delegatedVotes: 200
      },
      {
        id: '2',
        title: 'New Cooperation Guidelines',
        description: 'Updated guidelines for inter-cooperative collaboration',
        status: 'passed',
        votesFor: 800,
        votesAgainst: 100,
        quorum: 1000,
        createdBy: 'did:icn:bob',
        endsAt: '2024-10-15',
        totalVoters: 1200,
        delegatedVotes: 150
      }
    ]

    const mockStats = {
      totalProposals: 45,
      activeProposals: 3,
      participationRate: 78.5,
      monthlyVotes: [
        { month: 'Jan', votes: 120 },
        { month: 'Feb', votes: 150 },
        { month: 'Mar', votes: 180 },
        { month: 'Apr', votes: 220 }
      ]
    }

    const mockReputationUpdates: ReputationUpdate[] = [
      {
        did: 'did:icn:alice',
        change: 10,
        newTotal: 110,
        category: 'governance' // Added category field
      },
      {
        did: 'did:icn:bob',
        change: -5,
        newTotal: 95,
        category: 'resource_sharing' // Added category field
      }
    ]

    setProposals(mockProposals)
    setVotingStats(mockStats)
    setReputationUpdates(mockReputationUpdates)
    setLoading(false)

    // WebSocket connection for real-time updates
    const connectWebSocket = () => {
      if (!wsRef.current) {
        try {
          wsRef.current = new WebSocket('ws://localhost:8080/ws')

          wsRef.current.onopen = () => {
            console.log('WebSocket connected')
          }

          wsRef.current.onmessage = (event) => {
            try {
              const message: WebSocketMessage = JSON.parse(event.data)
              handleWebSocketMessage(message)
            } catch (e) {
              console.error('Failed to parse WebSocket message:', e)
            }
          }

          wsRef.current.onclose = () => {
            console.log('WebSocket disconnected, attempting to reconnect...')
            wsRef.current = null
            setTimeout(connectWebSocket, 5000)
          }

          wsRef.current.onerror = (error) => {
            console.error('WebSocket error:', error)
            if (wsRef.current) {
              wsRef.current.close()
              wsRef.current = null
            }
          }
        } catch (error) {
          console.error('Failed to establish WebSocket connection:', error)
        }
      }
    }

    connectWebSocket()

    return () => {
      if (wsRef.current) {
        wsRef.current.close()
        wsRef.current = null
      }
    }
  }, [])

  const handleWebSocketMessage = (message: WebSocketMessage) => {
    switch (message.type) {
      case 'ProposalUpdate':
        setProposals((prevProposals) =>
          prevProposals.map((proposal) =>
            proposal.id === (message.data as Proposal).id ? (message.data as Proposal) : proposal
          )
        )
        break
      case 'VoteUpdate':
        setProposals((prevProposals) =>
          prevProposals.map((proposal) =>
            proposal.id === (message.data as Proposal).id ? (message.data as Proposal) : proposal
          )
        )
        break
      case 'ReputationUpdate':
        setReputationUpdates((prevUpdates) => [...prevUpdates, message.data as ReputationUpdate])
        break
      default:
        console.error('Unknown WebSocket message type:', message.type)
    }
  }

  const calculateProgress = (votesFor: number, votesAgainst: number) => {
    const total = votesFor + votesAgainst
    return total > 0 ? (votesFor / total) * 100 : 0
  }

  const ReputationUpdateCard = ({ update }: { update: ReputationUpdate }) => (
    <Card className="p-4">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-lg font-semibold">Reputation Update</h3>
          <p className="text-sm text-gray-600">DID: {update.did}</p>
        </div>
        <span className={`px-2 py-1 rounded text-sm ${
          update.change > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
        }`}>
          {update.change > 0 ? '+' : ''}{update.change}
        </span>
      </div>

      <div className="space-y-2">
        <div className="flex justify-between text-sm">
          <span>New Total</span>
          <span>{update.newTotal}</span>
        </div>
        <div className="flex justify-between text-sm">
          <span>Category</span>
          <span>{update.category}</span>
        </div>
      </div>
    </Card>
  )

  const handleVote = async (proposalId: string, approve: boolean) => {
    try {
      const response = await fetch(`/api/governance/proposals/${proposalId}/vote`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ approve })
      })

      if (!response.ok) {
        throw new Error('Failed to cast vote')
      }

      // Update the proposal state with the new vote count
      setProposals(prevProposals =>
        prevProposals.map(proposal =>
          proposal.id === proposalId
            ? {
                ...proposal,
                votesFor: approve ? proposal.votesFor + 1 : proposal.votesFor,
                votesAgainst: !approve ? proposal.votesAgainst + 1 : proposal.votesAgainst
              }
            : proposal
        )
      )
    } catch (error) {
      console.error('Error voting on proposal:', error)
    }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setNewProposal(prevState => ({ ...prevState, [name]: value }))
  }

  const validateForm = () => {
    const errors = { title: '', description: '' }
    if (!newProposal.title) errors.title = 'Title is required'
    if (!newProposal.description) errors.description = 'Description is required'
    setFormErrors(errors)
    return !errors.title && !errors.description
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!validateForm()) return

    setIsSubmitting(true)
    try {
      const response = await fetch('/api/governance/proposals', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProposal)
      })

      if (!response.ok) {
        throw new Error('Failed to create proposal')
      }

      const createdProposal = await response.json()
      setProposals(prevProposals => [...prevProposals, createdProposal])
      setIsModalOpen(false)
      setNewProposal({ title: '', description: '' })
    } catch (error) {
      console.error('Error creating proposal:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  // Add methods to create, join, and propose members for federations
  const createFederation = async (params: FederationParams) => {
    try {
      const response = await fetch('http://localhost:8081/api/federations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(params)
      });

      if (!response.ok) {
        throw new Error('Failed to create federation');
      }

      const federation = await response.json();
      setProposals((prevProposals) => [...prevProposals, federation]);
    } catch (error) {
      console.error('Error creating federation:', error);
    }
  };

  const joinFederation = async (federationId: string, proof: MembershipProof) => {
    try {
      const response = await fetch(`http://localhost:8081/api/federations/${federationId}/join`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(proof)
      });

      if (!response.ok) {
        throw new Error('Failed to join federation');
      }

      await response.json();
      // Update state or UI as needed
    } catch (error) {
      console.error('Error joining federation:', error);
    }
  };

  const proposeMember = async (federationId: string, candidateId: string) => {
    try {
      const response = await fetch(`http://localhost:8081/api/federations/${federationId}/propose`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ candidateId })
      });

      if (!response.ok) {
        throw new Error('Failed to propose member');
      }

      const proposal = await response.json();
      setProposals((prevProposals) => [...prevProposals, proposal]);
    } catch (error) {
      console.error('Error proposing member:', error);
    }
  };

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Active Proposals</p>
                <h3 className="text-2xl font-bold">{votingStats.activeProposals}</h3>
              </div>
              <AlertCircle className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Participation Rate</p>
                <h3 className="text-2xl font-bold">{votingStats.participationRate}%</h3>
              </div>
              <Users className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Total Proposals</p>
                <h3 className="text-2xl font-bold">{votingStats.totalProposals}</h3>
              </div>
              <TrendingUp className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Voting Activity</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={votingStats.monthlyVotes}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="votes" 
                  stroke="#8884d8"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Active Proposals</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={votingStats.monthlyVotes}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="votes" stroke="#8884d8" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Dispute Resolution Status</CardTitle>
          </CardHeader>
          <CardContent>
            {/* Add dispute resolution UI components */}
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Proposals</CardTitle>
        </CardHeader>
        <CardContent>
          <Button onClick={() => setIsModalOpen(true)}>Create Proposal</Button>
          <Tabs value={selectedTab} onValueChange={setSelectedTab}>
            <TabsList>
              <TabsTrigger value="active">Active</TabsTrigger>
              <TabsTrigger value="passed">Passed</TabsTrigger>
              <TabsTrigger value="rejected">Rejected</TabsTrigger>
            </TabsList>

            <TabsContent value="active" className="space-y-4">
              {proposals.filter(p => p.status === 'active').map(proposal => (
                <ProposalCard key={proposal.id} proposal={proposal} />
              ))}
            </TabsContent>

            <TabsContent value="passed" className="space-y-4">
              {proposals.filter(p => p.status === 'passed').map(proposal => (
                <ProposalCard key={proposal.id} proposal={proposal} />
              ))}
            </TabsContent>

            <TabsContent value="rejected" className="space-y-4">
              {proposals.filter(p => p.status === 'rejected').map(proposal => (
                <ProposalCard key={proposal.id} proposal={proposal} />
              ))}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Reputation Updates</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {reputationUpdates.map((update, index) => (
            <ReputationUpdateCard key={index} update={update} />
          ))}
        </CardContent>
      </Card>

      <Alert>
        <AlertDescription>
          You currently have {proposals[0]?.delegatedVotes || 0} votes delegated to you. 
          Visit the delegation page to manage your voting power.
        </AlertDescription>
      </Alert>

      <Dialog isOpen={isModalOpen} onDismiss={() => setIsModalOpen(false)} aria-label="Create Proposal" as="div">
        <DialogOverlay as="div" />
        <DialogContent as="div">
          <h2 className="text-xl font-bold mb-4">Create Proposal</h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label htmlFor="title" className="block text-sm font-medium text-gray-700">
                Title
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={newProposal.title}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              />
              {formErrors.title && <p className="text-red-500 text-sm mt-1">{formErrors.title}</p>}
            </div>
            <div className="mb-4">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                value={newProposal.description}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              />
              {formErrors.description && <p className="text-red-500 text-sm mt-1">{formErrors.description}</p>}
            </div>
            <div className="flex justify-end">
              <Button type="button" onClick={() => setIsModalOpen(false)} className="mr-2">
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Submitting...' : 'Submit'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default GovernanceDashboard;```

===================
File: ./frontend/src/components/governance/ProposalCard.tsx
Size: 1287 bytes
===================
```tsx
import React from 'react';

interface ProposalCardProps {
  proposal: {
    id: string;
    title: string;
    description: string;
    status: 'active' | 'passed' | 'rejected';
    votesFor: number;
    votesAgainst: number;
    quorum: number;
    createdBy: string;
    endsAt: string;
    totalVoters: number;
    delegatedVotes: number;
  };
}

const ProposalCard: React.FC<ProposalCardProps> = ({ proposal }) => {
  return (
    <div className="card mb-4">
      <div className="card-body">
        <h5 className="card-title">{proposal.title}</h5>
        <h6 className="card-subtitle mb-2 text-muted">Status: {proposal.status}</h6>
        <p className="card-text">{proposal.description}</p>
        <p className="card-text">Votes For: {proposal.votesFor}</p>
        <p className="card-text">Votes Against: {proposal.votesAgainst}</p>
        <p className="card-text">Quorum: {proposal.quorum}</p>
        <p className="card-text">Created By: {proposal.createdBy}</p>
        <p className="card-text">Ends At: {new Date(proposal.endsAt).toLocaleDateString()}</p>
        <p className="card-text">Total Voters: {proposal.totalVoters}</p>
        <p className="card-text">Delegated Votes: {proposal.delegatedVotes}</p>
      </div>
    </div>
  );
};

export default ProposalCard;
```

===================
File: ./frontend/src/components/layout/Layout.tsx
Size: 3104 bytes
===================
```tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Network, Menu, Settings, Users } from 'lucide-react';

interface LayoutProps {
  children: React.ReactNode;
}

export const Layout = ({ children }: LayoutProps) => {
  const location = useLocation();

  const isActivePath = (path: string) => {
    return location.pathname === path;
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-white shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <Link to="/" className="text-xl font-bold text-gray-900">ICN Platform</Link>
              </div>

              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                <Link
                  to="/"
                  className={`${
                    isActivePath('/') 
                      ? 'border-blue-500 text-gray-900'
                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                >
                  <Network className="h-4 w-4 mr-2" />
                  Network
                </Link>

                <Link
                  to="/governance"
                  className={`${
                    isActivePath('/governance')
                      ? 'border-blue-500 text-gray-900'
                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                >
                  <Menu className="h-4 w-4 mr-2" />
                  Governance
                </Link>

                <Link
                  to="/community"
                  className={`${
                    isActivePath('/community')
                      ? 'border-blue-500 text-gray-900'
                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                >
                  <Users className="h-4 w-4 mr-2" />
                  Community
                </Link>

                <Link
                  to="/settings"
                  className={`${
                    isActivePath('/settings')
                      ? 'border-blue-500 text-gray-900'
                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                >
                  <Settings className="h-4 w-4 mr-2" />
                  Settings
                </Link>
              </div>
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {children}
      </main>
    </div>
  );
};```

===================
File: ./frontend/src/components/nodes/NetworkGraph.tsx
Size: 3872 bytes
===================
```tsx
import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import { useWebSocket } from '@/hooks/useWebSocket';

interface Node {
  id: string;
  status: string;
  type: string;
}

interface Link {
  source: string;
  target: string;
}

interface GraphData {
  nodes: Node[];
  links: Link[];
}

export const NetworkGraph: React.FC = () => {
  const svgRef = useRef<SVGSVGElement>(null);
  const tooltipRef = useRef<HTMLDivElement>(null);

  const handleNetworkUpdate = (data: GraphData) => {
    renderGraph(data);
  };

  const { sendMessage } = useWebSocket({
    url: 'ws://localhost:8081/ws',
    onMessage: handleNetworkUpdate
  });

  const renderGraph = (data: GraphData) => {
    if (!svgRef.current) return;

    const width = svgRef.current.clientWidth;
    const height = svgRef.current.clientHeight;

    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove();

    const simulation = d3.forceSimulation(data.nodes as any)
      .force('link', d3.forceLink(data.links).id((d: any) => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-400))
      .force('center', d3.forceCenter(width / 2, height / 2));

    const getNodeColor = (status: string) => {
      switch (status) {
        case 'online': return '#22c55e';
        case 'offline': return '#ef4444';
        default: return '#eab308';
      }
    };

    const links = svg.append('g')
      .selectAll('line')
      .data(data.links)
      .enter()
      .append('line')
      .attr('stroke', '#cbd5e1')
      .attr('stroke-width', 1.5);

    const nodes = svg.append('g')
      .selectAll('circle')
      .data(data.nodes)
      .enter()
      .append('circle')
      .attr('r', 15)
      .attr('fill', d => getNodeColor(d.status))
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended) as any);

    const labels = svg.append('g')
      .selectAll('text')
      .data(data.nodes)
      .enter()
      .append('text')
      .text(d => d.id)
      .attr('font-size', '12px')
      .attr('text-anchor', 'middle')
      .attr('dy', 30);

    nodes.on('mouseover', function(event, d: any) {
      if (!tooltipRef.current) return;
      
      const tooltip = d3.select(tooltipRef.current)
        .style('display', 'block')
        .style('left', (event.pageX + 10) + 'px')
        .style('top', (event.pageY - 10) + 'px');

      tooltip.html(`
        <strong>${d.id}</strong><br>
        Type: ${d.type}<br>
        Status: ${d.status}
      `);
    })
    .on('mouseout', function() {
      if (!tooltipRef.current) return;
      d3.select(tooltipRef.current).style('display', 'none');
    });

    simulation.on('tick', () => {
      links
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);

      nodes
        .attr('cx', (d: any) => d.x)
        .attr('cy', (d: any) => d.y);

      labels
        .attr('x', (d: any) => d.x)
        .attr('y', (d: any) => d.y);
    });

    function dragstarted(event: any) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event: any) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event: any) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  };

  return (
    <div className="relative w-full h-full">
      <svg ref={svgRef} className="w-full h-full" />
      <div
        ref={tooltipRef}
        className="absolute hidden bg-black bg-opacity-75 text-white p-2 rounded text-sm pointer-events-none"
        style={{ zIndex: 1000 }}
      />
    </div>
  );
};```

===================
File: ./frontend/src/components/nodes/NodeDashboard.tsx
Size: 6022 bytes
===================
```tsx
import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { NodeMonitor } from './NodeMonitor';
import { NetworkGraph } from './NetworkGraph';
import { useNodes } from '@/hooks/useNodes';

interface WorkloadSubmission {
  type: string;
  command: string;
  cpuCores: number;
  memoryMB: number;
  targetNode?: string;
}

export const NodeDashboard = () => {
  const { nodes } = useNodes();
  const [workload, setWorkload] = useState<WorkloadSubmission>({
    type: 'container',
    command: '',
    cpuCores: 1,
    memoryMB: 256
  });

  const handleSubmitWorkload = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:8081/api/workloads', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: workload.type,
          command: workload.command,
          requirements: {
            cpu: { cores: workload.cpuCores },
            memory: { required: `${workload.memoryMB}MB` }
          },
          targetNode: workload.targetNode
        }),
      });

      if (response.ok) {
        setWorkload({
          type: 'container',
          command: '',
          cpuCores: 1,
          memoryMB: 256
        });
        // Could add a success notification here
      }
    } catch (error) {
      console.error('Error submitting workload:', error);
      // Could add an error notification here
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold">ICN Network Dashboard</h1>
      
      <Tabs defaultValue="monitor" className="space-y-4">
        <TabsList>
          <TabsTrigger value="monitor">Node Monitor</TabsTrigger>
          <TabsTrigger value="network">Network View</TabsTrigger>
          <TabsTrigger value="workload">Workload Management</TabsTrigger>
        </TabsList>

        <TabsContent value="monitor">
          <NodeMonitor />
        </TabsContent>

        <TabsContent value="network">
          <Card>
            <CardContent className="h-[600px] p-0">
              <NetworkGraph />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="workload">
          <Card>
            <CardHeader>
              <CardTitle>Submit New Workload</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmitWorkload} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="type">Workload Type</Label>
                  <Select
                    value={workload.type}
                    onValueChange={(value) => setWorkload({...workload, type: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="container">Container</SelectItem>
                      <SelectItem value="function">Function</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="command">Command</Label>
                  <Input
                    id="command"
                    value={workload.command}
                    onChange={(e) => setWorkload({...workload, command: e.target.value})}
                    placeholder='["echo", "Hello ICN"]'
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="cpu">CPU Cores</Label>
                    <Input
                      id="cpu"
                      type="number"
                      min="1"
                      value={workload.cpuCores}
                      onChange={(e) => setWorkload({...workload, cpuCores: parseInt(e.target.value)})}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="memory">Memory (MB)</Label>
                    <Input
                      id="memory"
                      type="number"
                      min="64"
                      value={workload.memoryMB}
                      onChange={(e) => setWorkload({...workload, memoryMB: parseInt(e.target.value)})}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="targetNode">Target Node (Optional)</Label>
                  <Select
                    value={workload.targetNode}
                    onValueChange={(value) => setWorkload({...workload, targetNode: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Auto-select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">Auto-select</SelectItem>
                      {nodes.map(node => (
                        <SelectItem key={node.id} value={node.id}>
                          {node.id} ({node.metrics.status})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <Button type="submit" className="w-full">
                  Submit Workload
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};```

===================
File: ./frontend/src/components/nodes/NodeMonitor.tsx
Size: 3285 bytes
===================
```tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useNodes } from '@/hooks/useNodes';
import { Loader2 } from 'lucide-react';

export const NodeMonitor = () => {
  const { nodes, isLoading, error } = useNodes();

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'bg-green-500';
      case 'offline': return 'bg-red-500';
      default: return 'bg-yellow-500';
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-500 text-center p-4">
        Error loading node data: {error}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {nodes.map(node => (
        <Card key={node.id}>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>{node.id}</CardTitle>
              <Badge className={getStatusColor(node.metrics.status)}>
                {node.metrics.status}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <p className="text-sm font-medium mb-2">CPU Usage</p>
                <Progress value={node.metrics.cpuUsage} className="h-2" />
                <p className="text-sm text-gray-500 mt-1">{node.metrics.cpuUsage}%</p>
              </div>
              
              <div>
                <p className="text-sm font-medium mb-2">Memory Usage</p>
                <Progress value={node.metrics.memoryUsage.percentage} className="h-2" />
                <p className="text-sm text-gray-500 mt-1">
                  {Math.round(node.metrics.memoryUsage.used / 1024 / 1024 / 1024)}GB / 
                  {Math.round(node.metrics.memoryUsage.total / 1024 / 1024 / 1024)}GB
                </p>
              </div>

              <div>
                <p className="text-sm font-medium mb-2">Workloads</p>
                <div className="grid grid-cols-3 gap-2 text-center">
                  <div>
                    <p className="text-sm font-medium">{node.metrics.workloads.active}</p>
                    <p className="text-xs text-gray-500">Active</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">{node.metrics.workloads.completed}</p>
                    <p className="text-xs text-gray-500">Completed</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">{node.metrics.workloads.failed}</p>
                    <p className="text-xs text-gray-500">Failed</p>
                  </div>
                </div>
              </div>

              <div>
                <p className="text-sm font-medium mb-2">Connected Peers</p>
                <p className="text-2xl font-bold">{node.metrics.peersCount}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};```

===================
File: ./frontend/src/components/relationship/RelationshipIntegration.tsx
Size: 12853 bytes
===================
```tsx
import React, { useEffect, useState, useRef, useCallback } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Heart, MessageCircle, Users } from 'lucide-react';
import { FixedSizeList as List } from 'react-window';

// Types for our relationship data
interface Contribution {
  contributorDid: string;
  description: string;
  impactStory: string;
  date: string;
  context: string;
  witnesses: string[];
  feedback: Array<{
    fromDid: string;
    content: string;
    date: string;
    endorsementType: 'Verification' | 'Impact' | 'Character' | 'Skill';
  }>;
  tags: string[];
}

interface MutualAidInteraction {
  date: string;
  providerDid: string;
  receiverDid: string;
  description: string;
  impactStory?: string;
  reciprocityNotes?: string;
  tags: string[];
}

interface Relationship {
  memberOne: string;
  memberTwo: string;
  relationshipType: string;
  started: string;
  story: string;
  interactions: Array<{
    date: string;
    description: string;
    impact?: string;
    interactionType: string;
  }>;
  mutualEndorsements: Array<{
    fromDid: string;
    content: string;
    date: string;
    context: string;
    skills: string[];
  }>;
}

interface ReputationUpdate {
  did: string;
  change: number;
  newTotal: number;
  category: string; // Added category field
}

const RelationshipRow = ({ index, style, data }) => {
  const relationship = data[index];
  return (
    <div style={style}>
      <Card key={index} className="p-4">
        <div className="space-y-4">
          <div>
            <h3 className="font-medium">
              Relationship with {relationship.memberTwo}
            </h3>
            <p className="text-sm text-gray-500">
              Since {new Date(relationship.started).toLocaleDateString()}
            </p>
          </div>
          
          <div className="bg-gray-50 p-4 rounded">
            <h4 className="text-sm font-medium mb-1">Our Story</h4>
            <p className="text-gray-600">{relationship.story}</p>
          </div>

          <div>
            <h4 className="text-sm font-medium mb-2">Recent Interactions</h4>
            {relationship.interactions.slice(-3).map((interaction, j) => (
              <div key={j} className="mb-2 text-sm">
                <p className="font-medium">{interaction.description}</p>
                <p className="text-gray-600">
                  {new Date(interaction.date).toLocaleDateString()}
                </p>
              </div>
            ))}
          </div>
        </div>
      </Card>
    </div>
  );
};

const MutualAidRow = ({ index, style, data }) => {
  const interaction = data[index];
  return (
    <div style={style}>
      <Card key={index} className="p-4">
        <div className="flex items-start gap-4">
          <Heart className="h-5 w-5 text-green-500 mt-1" />
          <div>
            <h3 className="font-medium">{interaction.description}</h3>
            <p className="text-sm text-gray-500">
              {new Date(interaction.date).toLocaleDateString()}
            </p>
            {interaction.impactStory && (
              <p className="mt-2 text-gray-600">{interaction.impactStory}</p>
            )}
            {interaction.reciprocityNotes && (
              <p className="mt-2 text-sm text-gray-600 italic">
                {interaction.reciprocityNotes}
              </p>
            )}
          </div>
        </div>
      </Card>
    </div>
  );
};

export default function RelationshipIntegration() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [contributions, setContributions] = useState<Contribution[]>([]);
  const [relationships, setRelationships] = useState<Relationship[]>([]);
  const [mutualAid, setMutualAid] = useState<MutualAidInteraction[]>([]);
  const [reputationUpdates, setReputationUpdates] = useState<ReputationUpdate[]>([]);
  const [activeTab, setActiveTab] = useState('overview');
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    // Load initial data
    const loadData = async () => {
      try {
        setLoading(true);

        // Example of data fetching - replace with actual API endpoints
        const response = await fetch('http://localhost:8081/api/relationships/current-user');
        const data = await response.json();

        setContributions(data.contributions);
        setRelationships(data.relationships);
        setMutualAid(data.mutualAid);
        setReputationUpdates(data.reputationUpdates);

        // Set up WebSocket connection for real-time updates
        if (!wsRef.current) {
          wsRef.current = new WebSocket('ws://localhost:8088/ws');

          wsRef.current.onmessage = (event) => {
            const update = JSON.parse(event.data);
            switch (update.type) {
              case 'contribution':
                setContributions((prev) => [...prev, update.data]);
                break;
              case 'mutualAid':
                setMutualAid((prev) => [...prev, update.data]);
                break;
              case 'relationship':
                setRelationships((prev) =>
                  prev.map((r) =>
                    r.memberOne === update.data.memberOne ? update.data : r
                  )
                );
                break;
              case 'reputationUpdate':
                setReputationUpdates((prev) => [...prev, update.data]);
                break;
            }
          };
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load relationships');
      } finally {
        setLoading(false);
      }
    };

    loadData();

    // Cleanup function
    return () => {
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }
    };
  }, []);

  const getListHeight = useCallback(() => {
    return Math.min(window.innerHeight * 0.6, 800);
  }, []);

  if (loading) {
    return <div className="p-4">Loading relationships...</div>;
  }

  if (error) {
    return (
      <Alert>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="container mx-auto p-4 space-y-8">
      <Alert>
        <AlertDescription>
          Build stronger cooperative bonds through mutual aid, contributions, and shared stories.
        </AlertDescription>
      </Alert>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">
            <Users className="h-4 w-4 mr-2" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="mutual-aid">
            <Heart className="h-4 w-4 mr-2" />
            Mutual Aid
          </TabsTrigger>
          <TabsTrigger value="relationships">
            <MessageCircle className="h-4 w-4 mr-2" />
            Relationships
          </TabsTrigger>
          <TabsTrigger value="reputation-updates">
            <Users className="h-4 w-4 mr-2" />
            Reputation Updates
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview">
          <Card>
            <CardHeader>
              <CardTitle>Community Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* Recent Activity Overview */}
                <div className="grid gap-4 md:grid-cols-2">
                  {/* Latest Contributions */}
                  <Card className="p-4">
                    <h3 className="font-medium mb-2">Recent Contributions</h3>
                    {contributions.slice(-3).map((contribution, i) => (
                      <div key={i} className="mb-2 text-sm">
                        <p className="font-medium">{contribution.description}</p>
                        <p className="text-gray-600">{contribution.impactStory}</p>
                      </div>
                    ))}
                  </Card>

                  {/* Latest Mutual Aid */}
                  <Card className="p-4">
                    <h3 className="font-medium mb-2">Recent Mutual Aid</h3>
                    {mutualAid.slice(-3).map((interaction, i) => (
                      <div key={i} className="mb-2 text-sm">
                        <p className="font-medium">{interaction.description}</p>
                        {interaction.impactStory && (
                          <p className="text-gray-600">{interaction.impactStory}</p>
                        )}
                      </div>
                    ))}
                  </Card>
                </div>

                {/* Active Relationships */}
                <div>
                  <h3 className="font-medium mb-2">Active Relationships</h3>
                  <div className="space-y-2">
                    {relationships.slice(-3).map((relationship, i) => (
                      <Card key={i} className="p-4">
                        <p className="font-medium">
                          With {relationship.memberTwo}
                        </p>
                        <p className="text-sm text-gray-600">{relationship.story}</p>
                        <div className="mt-2">
                          <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                            {relationship.relationshipType}
                          </span>
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="mutual-aid">
          <Card>
            <CardHeader>
              <CardTitle>Mutual Aid Network</CardTitle>
            </CardHeader>
            <CardContent>
              <List
                height={getListHeight()}
                itemCount={mutualAid.length}
                itemSize={180}
                width="100%"
                itemData={mutualAid}
              >
                {MutualAidRow}
              </List>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="relationships">
          <Card>
            <CardHeader>
              <CardTitle>Your Relationships</CardTitle>
            </CardHeader>
            <CardContent>
              <List
                height={getListHeight()}
                itemCount={relationships.length}
                itemSize={180}
                width="100%"
                itemData={relationships}
              >
                {RelationshipRow}
              </List>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reputation-updates">
          <Card>
            <CardHeader>
              <CardTitle>Reputation Updates</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {reputationUpdates.map((update, i) => (
                  <Card key={i} className="p-4">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="text-lg font-semibold">Reputation Update</h3>
                        <p className="text-sm text-gray-600">DID: {update.did}</p>
                      </div>
                      <span className={`px-2 py-1 rounded text-sm ${
                        update.change > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {update.change > 0 ? '+' : ''}{update.change}
                      </span>
                    </div>

                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>New Total</span>
                        <span>{update.newTotal}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Category</span>
                        <span>{update.category}</span>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

===================
File: ./frontend/src/components/reputation/ReputationBadge.tsx
Size: 1499 bytes
===================
```tsx
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface ReputationBadgeProps {
  score: number;
  showTooltip?: boolean;
}

const ReputationBadge: React.FC<ReputationBadgeProps> = ({ score, showTooltip = true }) => {
  const getLevelInfo = (score: number) => {
    if (score >= 800) return { label: 'Elite', color: 'bg-purple-500', description: 'Top contributor with exceptional impact' };
    if (score >= 500) return { label: 'Expert', color: 'bg-blue-500', description: 'Highly respected community member' };
    if (score >= 200) return { label: 'Advanced', color: 'bg-green-500', description: 'Active and valued participant' };
    return { label: 'Beginner', color: 'bg-gray-500', description: 'Starting the journey' };
  };

  const levelInfo = getLevelInfo(score);

  if (!showTooltip) {
    return (
      <Badge className={`${levelInfo.color} text-white`}>
        {levelInfo.label}
      </Badge>
    );
  }

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger>
          <Badge className={`${levelInfo.color} text-white`}>
            {levelInfo.label}
          </Badge>
        </TooltipTrigger>
        <TooltipContent>
          <p>{levelInfo.description}</p>
          <p className="text-sm text-gray-500">Score: {score}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default ReputationBadge;
```

===================
File: ./frontend/src/components/reputation/ReputationDashboard.tsx
Size: 11386 bytes
===================
```tsx
import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area } from 'recharts';
import { HeatMapGrid } from 'react-grid-heatmap';
import { Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface ReputationData {
  timestamp: number;
  governance: number;
  resourceSharing: number;
  technicalContribution: number;
  communityEngagement: number;
  total: number;
  trend?: 'up' | 'down' | 'stable';
  milestones?: string[];
  performanceIndex?: number;
  ranking?: number;
  totalParticipants?: number;
}

interface Contribution {
  id: string;
  type: string;
  description: string;
  impact: number;
  timestamp: number;
}

const ReputationDashboard = () => {
  const [reputationHistory, setReputationHistory] = useState<ReputationData[]>([]);
  const [activityHeatmap, setActivityHeatmap] = useState<number[][]>([]);
  const [keyContributions, setKeyContributions] = useState<Contribution[]>([]);
  const [selectedPeriod, setSelectedPeriod] = useState('month');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showMilestones, setShowMilestones] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        // Mock data - replace with actual API calls
        const mockReputationData = generateMockReputationData();
        const mockHeatmap = generateMockHeatmapData();
        const mockContributions = generateMockContributions();

        setReputationHistory(mockReputationData);
        setActivityHeatmap(mockHeatmap);
        setKeyContributions(mockContributions);
      } catch (err) {
        setError('Failed to load reputation data');
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [selectedPeriod]);

  const calculatePerformanceMetrics = (data: ReputationData[]) => {
    const latestData = data[data.length - 1];
    latestData.performanceIndex = Math.round((latestData.total / 1000) * 100);
    latestData.ranking = Math.floor(Math.random() * 100) + 1; // Mock ranking
    latestData.totalParticipants = 500; // Mock total participants
    latestData.milestones = [
      'First Proposal',
      'Resource Contribution',
      'Federation Member',
      'Active Voter'
    ];
    return data;
  };

  const getContributionColor = (impact: number) => {
    if (impact >= 8) return 'text-green-600';
    if (impact >= 5) return 'text-blue-600';
    return 'text-gray-600';
  };

  const getReputationLevel = (total: number) => {
    if (total >= 800) return { label: 'Elite', color: 'bg-purple-500' };
    if (total >= 500) return { label: 'Expert', color: 'bg-blue-500' };
    if (total >= 200) return { label: 'Advanced', color: 'bg-green-500' };
    return { label: 'Beginner', color: 'bg-gray-500' };
  };

  const renderPerformanceCard = () => (
    <Card className="col-span-1">
      <CardHeader>
        <CardTitle>Performance Overview</CardTitle>
      </CardHeader>
      <CardContent>
        {reputationHistory.length > 0 && (
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span>Performance Index</span>
              <span className="font-bold">{reputationHistory[reputationHistory.length - 1].performanceIndex}%</span>
            </div>
            <div className="flex justify-between items-center">
              <span>Ranking</span>
              <span className="font-bold">#{reputationHistory[reputationHistory.length - 1].ranking}/{reputationHistory[reputationHistory.length - 1].totalParticipants}</span>
            </div>
            <div className="mt-4">
              <h4 className="font-medium mb-2">Milestones</h4>
              <div className="flex flex-wrap gap-2">
                {reputationHistory[reputationHistory.length - 1].milestones?.map((milestone, index) => (
                  <Badge key={index} variant="secondary">{milestone}</Badge>
                ))}
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Reputation Dashboard</h1>
        <div className="space-x-2">
          <Badge variant="outline" className="cursor-pointer" onClick={() => setSelectedPeriod('week')}>
            Week
          </Badge>
          <Badge variant="outline" className="cursor-pointer" onClick={() => setSelectedPeriod('month')}>
            Month
          </Badge>
          <Badge variant="outline" className="cursor-pointer" onClick={() => setSelectedPeriod('year')}>
            Year
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {renderPerformanceCard()}
        <Card className="col-span-2">
          <CardHeader>
            <CardTitle>Reputation Over Time</CardTitle>
            {reputationHistory.length > 0 && (
              <Badge 
                className={`${getReputationLevel(reputationHistory[reputationHistory.length - 1].total).color} text-white`}
              >
                {getReputationLevel(reputationHistory[reputationHistory.length - 1].total).label}
              </Badge>
            )}
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={reputationHistory}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="timestamp" tickFormatter={(value) => new Date(value).toLocaleDateString()} />
                  <YAxis />
                  <Tooltip 
                    content={({ active, payload, label }) => {
                      if (active && payload && payload.length) {
                        return (
                          <div className="bg-white p-4 rounded-lg shadow-lg border">
                            <p className="font-bold">{new Date(label).toLocaleDateString()}</p>
                            {payload.map((entry) => (
                              <div key={entry.name} className="flex justify-between gap-4">
                                <span style={{ color: entry.color }}>{entry.name}:</span>
                                <span className="font-medium">{entry.value}</span>
                              </div>
                            ))}
                          </div>
                        );
                      }
                      return null;
                    }}
                  />
                  <Legend />
                  <Area type="monotone" dataKey="governance" stackId="1" stroke="#8884d8" fill="#8884d8" />
                  <Area type="monotone" dataKey="resourceSharing" stackId="1" stroke="#82ca9d" fill="#82ca9d" />
                  <Area type="monotone" dataKey="technicalContribution" stackId="1" stroke="#ffc658" fill="#ffc658" />
                  <Area type="monotone" dataKey="communityEngagement" stackId="1" stroke="#ff7300" fill="#ff7300" />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Activity Heatmap</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <HeatMapGrid
                data={activityHeatmap}
                xLabels={Array.from({ length: 7 }, (_, i) => ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i])}
                yLabels={Array.from({ length: 24 }, (_, i) => `${i}:00`)}
                cellHeight="20px"
                cellRender={(x, y, value) => (
                  <div title={`${value} activities`} className="w-full h-full" />
                )}
                cellStyle={(x, y, ratio) => ({
                  background: `rgb(0, 128, 0, ${ratio})`,
                  fontSize: '11px',
                })}
              />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Key Contributions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {keyContributions.map((contribution) => (
              <div 
                key={contribution.id}
                className="flex justify-between items-center p-4 bg-gray-50 rounded-lg"
              >
                <div>
                  <h3 className="font-medium">{contribution.type}</h3>
                  <p className="text-sm text-gray-600">{contribution.description}</p>
                </div>
                <div className="text-right">
                  <span className={`font-bold ${getContributionColor(contribution.impact)}`}>
                    +{contribution.impact}
                  </span>
                  <p className="text-sm text-gray-500">
                    {new Date(contribution.timestamp).toLocaleDateString()}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Helper functions to generate mock data
function generateMockReputationData(): ReputationData[] {
  const data: ReputationData[] = [];
  const now = Date.now();
  const dayInMs = 86400000;

  for (let i = 30; i >= 0; i--) {
    data.push({
      timestamp: now - (i * dayInMs),
      governance: Math.floor(50 + Math.random() * 50),
      resourceSharing: Math.floor(30 + Math.random() * 40),
      technicalContribution: Math.floor(40 + Math.random() * 45),
      communityEngagement: Math.floor(35 + Math.random() * 35),
      total: Math.floor(200 + Math.random() * 100)
    });
  }
  return calculatePerformanceMetrics(data);
}

function generateMockHeatmapData(): number[][] {
  return Array.from({ length: 24 }, () =>
    Array.from({ length: 7 }, () => Math.random())
  );
}

function generateMockContributions(): Contribution[] {
  return [
    {
      id: '1',
      type: 'Governance Proposal',
      description: 'Proposed new resource allocation strategy',
      impact: 8,
      timestamp: Date.now() - 86400000
    },
    {
      id: '2',
      type: 'Technical Contribution',
      description: 'Implemented new consensus algorithm',
      impact: 10,
      timestamp: Date.now() - 172800000
    },
    {
      id: '3',
      type: 'Community Engagement',
      description: 'Organized virtual meetup',
      impact: 5,
      timestamp: Date.now() - 259200000
    }
  ];
}

export default ReputationDashboard;
```

===================
File: ./frontend/src/components/reputation/ReputationMetrics.tsx
Size: 1968 bytes
===================
```tsx
import React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';

interface MetricProps {
  label: string;
  value: number;
  maxValue: number;
  color: string;
}

const ReputationMetric = ({ label, value, maxValue, color }: MetricProps) => (
  <div className="space-y-2">
    <div className="flex justify-between">
      <span className="text-sm font-medium">{label}</span>
      <span className="text-sm text-muted-foreground">{value}/{maxValue}</span>
    </div>
    <Progress
      value={(value / maxValue) * 100}
      className={`h-2 ${color}`}
    />
  </div>
);

interface ReputationMetricsProps {
  governance: number;
  resourceSharing: number;
  technicalContribution: number;
  communityEngagement: number;
}

const ReputationMetrics = ({
  governance,
  resourceSharing,
  technicalContribution,
  communityEngagement,
}: ReputationMetricsProps) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Reputation Metrics</CardTitle>
        <CardDescription>Detailed breakdown of your reputation components</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <ReputationMetric
          label="Governance"
          value={governance}
          maxValue={100}
          color="bg-blue-500"
        />
        <ReputationMetric
          label="Resource Sharing"
          value={resourceSharing}
          maxValue={100}
          color="bg-green-500"
        />
        <ReputationMetric
          label="Technical Contribution"
          value={technicalContribution}
          maxValue={100}
          color="bg-purple-500"
        />
        <ReputationMetric
          label="Community Engagement"
          value={communityEngagement}
          maxValue={100}
          color="bg-orange-500"
        />
      </CardContent>
    </Card>
  );
};

export default ReputationMetrics;
```

===================
File: ./frontend/src/components/ui/alert-dialog.tsx
Size: 1550 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface AlertDialogProps {
  open: boolean;
  onClose: () => void;
  title: string;
  description: string;
  cancelText?: string;
  confirmText?: string;
  onConfirm?: () => void;
}

export function AlertDialog({
  open,
  onClose,
  title,
  description,
  cancelText = "Cancel",
  confirmText = "Confirm",
  onConfirm,
}: AlertDialogProps) {
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="fixed inset-0 bg-black/50" onClick={onClose} />
      <div className="relative bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h2 className="text-lg font-semibold mb-2">{title}</h2>
        <p className="text-gray-600 mb-6">{description}</p>
        <div className="flex justify-end space-x-4">
          <button
            className={cn(
              "px-4 py-2 rounded-md text-sm font-medium",
              "bg-gray-100 text-gray-700 hover:bg-gray-200"
            )}
            onClick={onClose}
          >
            {cancelText}
          </button>
          {onConfirm && (
            <button
              className={cn(
                "px-4 py-2 rounded-md text-sm font-medium",
                "bg-blue-500 text-white hover:bg-blue-600"
              )}
              onClick={() => {
                onConfirm();
                onClose();
              }}
            >
              {confirmText}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}```

===================
File: ./frontend/src/components/ui/alert.tsx
Size: 1326 bytes
===================
```tsx
import * as React from "react";

interface AlertProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "destructive";
}

const Alert = React.forwardRef<HTMLDivElement, AlertProps>(
  ({ className, variant = "default", ...props }, ref) => {
    const variantClasses = {
      default: "bg-background text-foreground",
      destructive: "bg-destructive text-destructive-foreground",
    };
    
    return (
      <div
        ref={ref}
        role="alert"
        className={`relative w-full rounded-lg border p-4 ${variantClasses[variant]} ${className || ""}`}
        {...props}
      />
    );
  }
);
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={`mb-1 font-medium leading-none tracking-tight ${className || ""}`}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`text-sm [&_p]:leading-relaxed ${className || ""}`}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };```

===================
File: ./frontend/src/components/ui/badge.tsx
Size: 952 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "secondary" | "success" | "warning" | "danger";
}

export function Badge({
  className,
  variant = "default",
  ...props
}: BadgeProps) {
  const variants = {
    default: "bg-primary text-primary-foreground hover:bg-primary/80",
    secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
    success: "bg-green-100 text-green-800 hover:bg-green-200",
    warning: "bg-yellow-100 text-yellow-800 hover:bg-yellow-200",
    danger: "bg-red-100 text-red-800 hover:bg-red-200",
  }

  return (
    <div
      className={cn(
        "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
        variants[variant],
        className
      )}
      {...props}
    />
  )
}```

===================
File: ./frontend/src/components/ui/button.tsx
Size: 1659 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link"
  size?: "default" | "sm" | "lg"
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", size = "default", ...props }, ref) => {
    return (
      <button
        className={cn(
          "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
          {
            "bg-primary text-primary-foreground hover:bg-primary/90": variant === "default",
            "bg-destructive text-destructive-foreground hover:bg-destructive/90": variant === "destructive",
            "border border-input bg-background hover:bg-accent hover:text-accent-foreground": variant === "outline",
            "bg-secondary text-secondary-foreground hover:bg-secondary/80": variant === "secondary",
            "hover:bg-accent hover:text-accent-foreground": variant === "ghost",
            "text-primary underline-offset-4 hover:underline": variant === "link",
          },
          {
            "h-10 px-4 py-2": size === "default",
            "h-9 rounded-md px-3": size === "sm",
            "h-11 rounded-md px-8": size === "lg",
          },
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button }```

===================
File: ./frontend/src/components/ui/card.tsx
Size: 1888 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
}```

===================
File: ./frontend/src/components/ui/progress.tsx
Size: 1041 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
  value: number;
  max?: number;
  color?: "default" | "success" | "warning" | "danger";
}

export function Progress({ 
  value, 
  max = 100, 
  color = "default",
  className,
  ...props 
}: ProgressProps) {
  const percentage = Math.min(Math.max((value / max) * 100, 0), 100);

  const colorVariants = {
    default: "bg-blue-500",
    success: "bg-green-500",
    warning: "bg-yellow-500",
    danger: "bg-red-500"
  };

  return (
    <div
      className={cn(
        "relative w-full overflow-hidden rounded-full bg-gray-200 h-2",
        className
      )}
      {...props}
    >
      <div
        className={cn(
          "h-full transition-all duration-300 ease-in-out",
          colorVariants[color]
        )}
        style={{ width: `${percentage}%` }}
        role="progressbar"
        aria-valuemin={0}
        aria-valuemax={max}
        aria-valuenow={value}
      />
    </div>
  );
}```

===================
File: ./frontend/src/components/ui/spinner.tsx
Size: 640 bytes
===================
```tsx
import React from 'react';
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface SpinnerProps extends React.HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg';
}

export const Spinner = ({ className, size = 'md', ...props }: SpinnerProps) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12'
  };

  return (
    <div
      role="status"
      className={cn('flex items-center justify-center', className)}
      {...props}
    >
      <Loader2 className={cn('animate-spin', sizeClasses[size])} />
      <span className="sr-only">Loading...</span>
    </div>
  );
};```

===================
File: ./frontend/src/components/ui/tabs.tsx
Size: 3199 bytes
===================
```tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const TabsContext = React.createContext<{
  selectedTab: string
  setSelectedTab: (value: string) => void
} | null>(null)

interface TabsProps extends React.HTMLAttributes<HTMLDivElement> {
  defaultValue?: string
  value?: string
  onValueChange?: (value: string) => void
}

const Tabs = React.forwardRef<HTMLDivElement, TabsProps>(
  ({ className, defaultValue, value, onValueChange, ...props }, ref) => {
    const [selectedTab, setSelectedTab] = React.useState(value || defaultValue || "")

    const handleTabChange = React.useCallback((newValue: string) => {
      setSelectedTab(newValue)
      onValueChange?.(newValue)
    }, [onValueChange])

    return (
      <TabsContext.Provider value={{ selectedTab, setSelectedTab: handleTabChange }}>
        <div
          ref={ref}
          className={cn("space-y-2", className)}
          {...props}
        />
      </TabsContext.Provider>
    )
  }
)
Tabs.displayName = "Tabs"

const TabsList = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = "TabsList"

interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string
}

const TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(
  ({ className, value, ...props }, ref) => {
    const context = React.useContext(TabsContext)
    const isSelected = context?.selectedTab === value

    return (
      <button
        ref={ref}
        role="tab"
        aria-selected={isSelected}
        data-state={isSelected ? "active" : "inactive"}
        onClick={() => context?.setSelectedTab(value)}
        className={cn(
          "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
          {
            "bg-background text-foreground shadow-sm": isSelected,
            "hover:bg-muted/50": !isSelected,
          },
          className
        )}
        {...props}
      />
    )
  }
)
TabsTrigger.displayName = "TabsTrigger"

interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string
}

const TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(
  ({ className, value, ...props }, ref) => {
    const context = React.useContext(TabsContext)
    const isSelected = context?.selectedTab === value

    if (!isSelected) return null

    return (
      <div
        ref={ref}
        role="tabpanel"
        className={cn(
          "ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          className
        )}
        {...props}
      />
    )
  }
)
TabsContent.displayName = "TabsContent"

export { Tabs, TabsList, TabsTrigger, TabsContent }```

===================
File: ./frontend/src/components/ui/tooltip.tsx
Size: 3071 bytes
===================
```tsx
import * as React from "react";

// Provider component for tooltip context
interface TooltipProviderProps {
  delayDuration?: number;
  skipDelayDuration?: number;
  disableHoverableContent?: boolean;
  children: React.ReactNode;
}

const TooltipProvider: React.FC<TooltipProviderProps> = ({ 
  children, 
  delayDuration = 700, 
  skipDelayDuration = 300, 
  disableHoverableContent = false
}) => {
  // In a real implementation, these values would be passed through context
  return <>{children}</>;
};

// Trigger component that responds to user interaction to display the tooltip
const TooltipTrigger = React.forwardRef<
  HTMLElement, 
  React.HTMLProps<HTMLElement> & { asChild?: boolean }
>(({ children, asChild = false, ...props }, ref) => {
  const childElement = asChild ? 
    React.Children.only(children) as React.ReactElement : 
    <span {...props} ref={ref as any}>{children}</span>;
  
  return React.cloneElement(childElement, {
    "data-state": "closed", 
    ...props,
    ref: (node: HTMLElement) => {
      if (ref) {
        if (typeof ref === "function") ref(node);
        else (ref as React.MutableRefObject<HTMLElement>).current = node;
      }
    }
  });
});
TooltipTrigger.displayName = "TooltipTrigger";

// Content component that displays the tooltip information
interface TooltipContentProps {
  children: React.ReactNode;
  className?: string;
  sideOffset?: number;
  alignOffset?: number;
  side?: "top" | "right" | "bottom" | "left";
  align?: "start" | "center" | "end";
  arrowPadding?: number;
  sticky?: "partial" | "always";
  hideWhenDetached?: boolean;
  avoidCollisions?: boolean;
}

const TooltipContent = React.forwardRef<
  HTMLDivElement, 
  TooltipContentProps & React.HTMLAttributes<HTMLDivElement>
>(({ 
  children, 
  className = "", 
  sideOffset = 4, 
  alignOffset = 0, 
  side = "top", 
  align = "center",
  ...props 
}, ref) => {
  return (
    <div
      ref={ref}
      className={`z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 ${className}`}
      data-side={side}
      data-align={align}
      style={{
        '--side-offset': `${sideOffset}px`,
        '--align-offset': `${alignOffset}px`,
      } as React.CSSProperties}
      {...props}
    >
      {children}
    </div>
  );
});
TooltipContent.displayName = "TooltipContent";

// Simple container component for tooltip functionality
interface TooltipProps {
  open?: boolean;
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
  delayDuration?: number;
  disableHoverableContent?: boolean;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ children }) => {
  return <>{children}</>;
};

export { 
  Tooltip, 
  TooltipTrigger, 
  TooltipContent, 
  TooltipProvider 
};```

===================
File: ./frontend/src/hooks/useNodes.ts
Size: 2600 bytes
===================
```ts
import { useState, useEffect, useCallback } from 'react';
import { useWebSocket } from './useWebSocket';

interface NodeMetrics {
  cpuUsage: number;
  memoryUsage: {
    total: number;
    used: number;
    percentage: number;
  };
  peersCount: number;
  status: 'online' | 'offline' | 'error';
  workloads: {
    active: number;
    completed: number;
    failed: number;
  };
}

interface Node {
  id: string;
  type: string;
  apiPort: number;
  metrics: NodeMetrics;
}

interface NetworkTopology {
  nodes: Node[];
  links: Array<{ source: string; target: string }>;
}

interface UseNodesResult {
  nodes: Node[];
  topology: NetworkTopology | null;
  isLoading: boolean;
  error: string | null;
  refreshNodes: () => Promise<void>;
}

export function useNodes(): UseNodesResult {
  const [nodes, setNodes] = useState<Node[]>([]);
  const [topology, setTopology] = useState<NetworkTopology | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const handleWebSocketMessage = useCallback((data: any) => {
    if (data.type === 'nodeUpdate') {
      setNodes(prev => prev.map(node => 
        node.id === data.nodeId ? { ...node, metrics: { ...node.metrics, ...data.metrics } } : node
      ));
    } else if (data.type === 'topologyUpdate') {
      setTopology(data.topology);
    }
  }, []);

  const { sendMessage } = useWebSocket({
    url: 'ws://localhost:8081/ws',
    onMessage: handleWebSocketMessage,
    onOpen: () => setError(null),
    onError: () => setError('WebSocket connection error'),
  });

  const fetchNodes = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await fetch('http://localhost:8081/api/nodes');
      if (!response.ok) {
        throw new Error('Failed to fetch nodes');
      }
      
      const data = await response.json();
      setNodes(data);
      
      const topologyResponse = await fetch('http://localhost:8081/api/network/topology');
      if (topologyResponse.ok) {
        const topologyData = await topologyResponse.json();
        setTopology(topologyData);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch nodes');
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchNodes();
    const interval = setInterval(fetchNodes, 30000); // Fallback polling every 30s
    return () => clearInterval(interval);
  }, [fetchNodes]);

  return {
    nodes,
    topology,
    isLoading,
    error,
    refreshNodes: fetchNodes,
  };
}```

===================
File: ./frontend/src/hooks/useWebSocket.ts
Size: 2108 bytes
===================
```ts
import { useEffect, useRef, useCallback } from 'react';

interface WebSocketConfig {
  url: string;
  onMessage: (data: any) => void;
  onOpen?: () => void;
  onClose?: () => void;
  onError?: (error: Event) => void;
  reconnectDelay?: number;
}

export function useWebSocket({
  url,
  onMessage,
  onOpen,
  onClose,
  onError,
  reconnectDelay = 5000,
}: WebSocketConfig) {
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();

  const connect = useCallback(() => {
    try {
      wsRef.current = new WebSocket(url);

      wsRef.current.onopen = () => {
        console.log('WebSocket connected');
        onOpen?.();
      };

      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          onMessage(data);
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      };

      wsRef.current.onclose = () => {
        console.log('WebSocket disconnected, attempting to reconnect...');
        wsRef.current = null;
        onClose?.();
        reconnectTimeoutRef.current = setTimeout(connect, reconnectDelay);
      };

      wsRef.current.onerror = (error) => {
        console.error('WebSocket error:', error);
        onError?.(error);
      };
    } catch (error) {
      console.error('Failed to establish WebSocket connection:', error);
      reconnectTimeoutRef.current = setTimeout(connect, reconnectDelay);
    }
  }, [url, onMessage, onOpen, onClose, onError, reconnectDelay]);

  useEffect(() => {
    connect();
    return () => {
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
    };
  }, [connect]);

  const sendMessage = useCallback((message: any) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(message));
    } else {
      console.warn('WebSocket is not connected');
    }
  }, []);

  return { sendMessage };
}```

===================
File: ./frontend/src/index.tsx
Size: 333 bytes
===================
```tsx
// Ensure the root component is correctly rendered
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/globals.css';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);```

===================
File: ./frontend/src/lib/utils.ts
Size: 165 bytes
===================
```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}```

===================
File: ./scripts/frontend/src/components/ui/alert/index.tsx
Size: 810 bytes
===================
```tsx
import * as React from "react"

export interface AlertProps extends React.HTMLAttributes<HTMLDivElement> {}

export const Alert = React.forwardRef<HTMLDivElement, AlertProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`relative w-full rounded-lg border p-4 ${className || ""}`}
        {...props}
      />
    )
  }
)
Alert.displayName = "Alert"

export interface AlertDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}

export const AlertDescription = React.forwardRef<HTMLParagraphElement, AlertDescriptionProps>(
  ({ className, ...props }, ref) => {
    return (
      <p
        ref={ref}
        className={`text-sm ${className || ""}`}
        {...props}
      />
    )
  }
)
AlertDescription.displayName = "AlertDescription"
```

===================
File: ./scripts/frontend/src/components/ui/badge/index.tsx
Size: 816 bytes
===================
```tsx
import * as React from "react"

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "secondary" | "success" | "warning" | "danger"
}

export const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant = "default", ...props }, ref) => {
    const variantStyles = {
      default: "bg-blue-100 text-blue-800",
      secondary: "bg-gray-100 text-gray-800",
      success: "bg-green-100 text-green-800",
      warning: "bg-yellow-100 text-yellow-800",
      danger: "bg-red-100 text-red-800",
    }

    return (
      <div
        ref={ref}
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${variantStyles[variant]} ${className || ""}`}
        {...props}
      />
    )
  }
)
Badge.displayName = "Badge"
```

===================
File: ./scripts/frontend/src/components/ui/button/index.tsx
Size: 1048 bytes
===================
```tsx
import * as React from "react"

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "default" | "outline" | "ghost"
  size?: "sm" | "md" | "lg"
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", size = "md", ...props }, ref) => {
    const variantStyles = {
      default: "bg-blue-500 text-white hover:bg-blue-600",
      outline: "border border-gray-300 hover:bg-gray-50",
      ghost: "hover:bg-gray-100",
    }

    const sizeStyles = {
      sm: "px-3 py-1 text-sm",
      md: "px-4 py-2",
      lg: "px-6 py-3 text-lg",
    }

    return (
      <button
        ref={ref}
        className={`inline-flex items-center justify-center rounded-md font-medium transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none
        ${variantStyles[variant]} ${sizeStyles[size]} ${className || ""}`}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"
```

===================
File: ./scripts/frontend/src/components/ui/card/index.tsx
Size: 1542 bytes
===================
```tsx
import * as React from "react"

export interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}

export const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`rounded-lg border bg-white shadow-sm ${className || ""}`}
        {...props}
      />
    )
  }
)
Card.displayName = "Card"

export interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}

export const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`flex flex-col space-y-1.5 p-6 ${className || ""}`}
        {...props}
      />
    )
  }
)
CardHeader.displayName = "CardHeader"

export interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}

export const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ className, ...props }, ref) => {
    return (
      <h3
        ref={ref}
        className={`text-lg font-semibold ${className || ""}`}
        {...props}
      />
    )
  }
)
CardTitle.displayName = "CardTitle"

export interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}

export const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`p-6 pt-0 ${className || ""}`}
        {...props}
      />
    )
  }
)
CardContent.displayName = "CardContent"
```

===================
File: ./scripts/frontend/src/components/ui/progress/index.tsx
Size: 654 bytes
===================
```tsx
import * as React from "react"

export interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: number
  max?: number
}

export const Progress = React.forwardRef<HTMLDivElement, ProgressProps>(
  ({ value = 0, max = 100, className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`w-full h-2 bg-gray-200 rounded-full overflow-hidden ${className}`}
        {...props}
      >
        <div
          className="h-full bg-blue-500 transition-all duration-300 ease-in-out"
          style={{ width: `${(value / max) * 100}%` }}
        />
      </div>
    )
  }
)

Progress.displayName = "Progress"
```

===================
File: ./scripts/frontend/src/components/ui/tabs/index.tsx
Size: 2794 bytes
===================
```tsx
import * as React from "react"

export interface TabsProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: string
  onValueChange?: (value: string) => void
}

export const Tabs = React.forwardRef<HTMLDivElement, TabsProps>(
  ({ value, onValueChange, className, children, ...props }, ref) => {
    const [selectedTab, setSelectedTab] = React.useState(value || "")

    const handleValueChange = (newValue: string) => {
      setSelectedTab(newValue)
      onValueChange?.(newValue)
    }

    return (
      <div
        ref={ref}
        className={`${className || ""}`}
        {...props}
        data-selected-tab={selectedTab}
      >
        {React.Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return React.cloneElement(child as React.ReactElement<any>, {
              selectedTab,
              onValueChange: handleValueChange,
            })
          }
          return child
        })}
      </div>
    )
  }
)
Tabs.displayName = "Tabs"

export interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {
  selectedTab?: string
  onValueChange?: (value: string) => void
}

export const TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`flex space-x-1 bg-gray-100 p-1 rounded-md ${className || ""}`}
        {...props}
      >
        {children}
      </div>
    )
  }
)
TabsList.displayName = "TabsList"

export interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string
  selectedTab?: string
  onValueChange?: (value: string) => void
}

export const TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(
  ({ className, value, selectedTab, onValueChange, ...props }, ref) => {
    const isSelected = selectedTab === value
    
    return (
      <button
        ref={ref}
        className={`px-3 py-1.5 text-sm font-medium transition-all rounded-md
          ${isSelected ? "bg-white shadow-sm" : "text-gray-600 hover:text-gray-900"}
          ${className || ""}`}
        onClick={() => onValueChange?.(value)}
        data-selected={isSelected}
        {...props}
      />
    )
  }
)
TabsTrigger.displayName = "TabsTrigger"

export interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string
  selectedTab?: string
}

export const TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(
  ({ className, value, selectedTab, ...props }, ref) => {
    const isSelected = selectedTab === value

    if (!isSelected) return null

    return (
      <div
        ref={ref}
        className={`mt-2 ${className || ""}`}
        {...props}
      />
    )
  }
)
TabsContent.displayName = "TabsContent"
```

===================
File: ./scripts/frontend/src/components/ui/tooltip/index.tsx
Size: 1437 bytes
===================
```tsx
import * as React from "react"

export interface TooltipProps {
  children: React.ReactNode
}

export const Tooltip = ({ children }: TooltipProps) => {
  return (
    <div className="relative inline-block">{children}</div>
  )
}

export interface TooltipTriggerProps extends React.HTMLAttributes<HTMLDivElement> {}

export const TooltipTrigger = React.forwardRef<HTMLDivElement, TooltipTriggerProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`inline-block cursor-pointer ${className || ""}`}
        {...props}
      />
    )
  }
)
TooltipTrigger.displayName = "TooltipTrigger"

export interface TooltipContentProps extends React.HTMLAttributes<HTMLDivElement> {
  side?: "top" | "right" | "bottom" | "left"
}

export const TooltipContent = React.forwardRef<HTMLDivElement, TooltipContentProps>(
  ({ className, side = "top", ...props }, ref) => {
    const sidePositions = {
      top: "bottom-full mb-1",
      right: "left-full ml-1",
      bottom: "top-full mt-1",
      left: "right-full mr-1",
    }

    return (
      <div
        ref={ref}
        className={`absolute z-50 px-3 py-2 text-sm bg-black text-white rounded shadow-md ${sidePositions[side]} ${className || ""}`}
        {...props}
      />
    )
  }
)
TooltipContent.displayName = "TooltipContent"

export const TooltipProvider = ({ children }: { children: React.ReactNode }) => {
  return <>{children}</>
}
```

===================
Summary for 03_frontend
===================
Total size of dump: 120919 bytes
Patterns included:
- frontend/src/*.ts
- frontend/src/App.tsx
- frontend/src/index.tsx
- frontend/src/hooks/useNodes.ts
- frontend/src/hooks/useWebSocket.ts
- frontend/src/lib/utils.ts
- frontend/src/*/*.tsx
- frontend/src/*/*/*.ts
- frontend/src/components/authentication/Authentication.tsx
- frontend/src/components/community/CommunityDashboard.tsx
- frontend/src/components/consensus/ConsensusMonitor.tsx
- frontend/src/components/cooperative/CooperativeDashboard.tsx
- frontend/src/components/governance/GovernanceDashboard.tsx
- frontend/src/components/governance/ProposalCard.tsx
- frontend/src/components/layout/Layout.tsx
- frontend/src/components/nodes/NetworkGraph.tsx
- frontend/src/components/nodes/NodeDashboard.tsx
- frontend/src/components/nodes/NodeMonitor.tsx
- frontend/src/components/relationship/RelationshipIntegration.tsx
- frontend/src/components/reputation/ReputationBadge.tsx
- frontend/src/components/reputation/ReputationDashboard.tsx
- frontend/src/components/reputation/ReputationMetrics.tsx
- frontend/src/components/ui/alert-dialog.tsx
- frontend/src/components/ui/alert.tsx
- frontend/src/components/ui/badge.tsx
- frontend/src/components/ui/button.tsx
- frontend/src/components/ui/card.tsx
- frontend/src/components/ui/progress.tsx
- frontend/src/components/ui/spinner.tsx
- frontend/src/components/ui/tabs.tsx
- frontend/src/components/ui/tooltip.tsx

Files processed: 35
===================

Project Code Dump - Generated Sat Dec  7 17:30:55 UTC 2024
======================================

LLM Context Information
======================
This is a distributed cooperative network system with the following key components:

Core Components:
- Backend: Rust-based node implementation
- Frontend: TypeScript/React web interface
- Contracts: Smart contracts for cooperative governance

Architecture Overview:
- Blockchain: Handles consensus and state management
- Identity: DID-based identity management
- Relationship: Tracks member interactions and relationships
- Reputation: Manages trust and reputation scores
- Governance: Handles proposals and voting
- WebSocket: Real-time communication layer

File Organization:
- /backend/src/: Core Rust implementation
- /frontend/src/: React frontend application
- /contracts/: Smart contract implementations
- /docker/: Deployment configurations

======================

Project Tree:
=============
.
├── Cargo.lock
├── Cargo.toml
├── ICN.code-workspace
├── contracts
│   ├── cooperative
│   │   └── src
│   └── governance
├── crates
│   ├── icn-consensus
│   │   ├── Cargo.toml
│   │   └── src
│   ├── icn-core
│   │   ├── Cargo.lock
│   │   ├── Cargo.toml
│   │   ├── lib.rs,old
│   │   └── src
│   ├── icn-crypto
│   │   ├── Cargo.toml
│   │   └── src
│   ├── icn-p2p
│   │   ├── Cargo.toml
│   │   └── src
│   ├── icn-runtime
│   │   ├── Cargo.toml
│   │   └── src
│   ├── icn-storage
│   │   ├── Cargo.toml
│   │   └── src
│   └── icn-types
│       ├── Cargo.toml
│       └── src
├── create_docs_dump.sh
├── docker
│   ├── backend.Dockerfile
│   ├── backend_new.Dockerfile
│   ├── docker-compose.yml
│   └── frontend.Dockerfile
├── frontend
│   ├── package.json
│   ├── src
│   │   ├── app
│   │   ├── components
│   │   ├── contexts
│   │   ├── hooks
│   │   ├── lib
│   │   └── styles
│   └── tsconfig.json
├── generate_code_dump.sh
├── icn_backup_20241207.tar.gz
├── improved-setup.sh
├── inventory_nodes.sh
├── old_src_backup
│   ├── api
│   │   ├── cooperative.rs
│   │   └── mod.rs
│   ├── blockchain
│   │   ├── block.rs
│   │   ├── chain.rs
│   │   ├── mod.rs
│   │   └── transaction.rs
│   ├── claims
│   │   └── mod.rs
│   ├── community
│   │   └── mod.rs
│   ├── config
│   ├── consensus
│   ├── cooperative
│   │   └── mod.rs
│   ├── governance
│   │   ├── mod.rs
│   │   └── proposal.rs
│   ├── identity
│   │   ├── authentication.rs
│   │   ├── did.rs
│   │   ├── identity_manager.rs
│   │   ├── identity_system.rs
│   │   ├── key_pair.rs
│   │   └── mod.rs
│   ├── lib.rs
│   ├── main.rs
│   ├── monitoring
│   │   ├── energy.rs
│   │   ├── metrics.rs
│   │   ├── mod.rs
│   │   ├── prometheus.rs
│   │   └── service.rs
│   ├── network
│   ├── relationship
│   │   ├── mod.rs
│   │   ├── models
│   │   ├── system.rs
│   │   └── types.rs
│   ├── reputation
│   │   ├── mod.rs
│   │   └── reputation_system.rs
│   ├── state
│   │   ├── merkle_tree.rs
│   │   ├── migrations.rs
│   │   ├── mod.rs
│   │   ├── persistence.rs
│   │   ├── state_migrations.rs
│   │   └── validation.rs
│   ├── storage
│   ├── utils
│   │   ├── mod.rs
│   │   └── notifications.rs
│   ├── vm
│   └── websocket
│       ├── backend.code-workspace
│       ├── handler.rs
│       └── mod.rs
├── project_code_dump.txt
├── project_docs_dump.txt
├── setup_and_run_script.sh
├── setup_docs.sh
├── setup_venv.sh
├── start_docs_server.sh
└── tools
    ├── README.md
    ├── activate-docs-env.sh
    ├── activate-docs-env.sh.bak
    ├── doctools
    │   ├── __init__.py
    │   ├── docmanager.py
    │   ├── docsctl
    │   ├── specgen.py
    │   └── venv
    ├── install_docsctl.sh
    └── requirements.txt

===================
File: ./docker/docker-compose.yml
Size: 829 bytes
Modified: 2024-11-20 22:07:42.247802666 +0000

===================

===================
File: ./crates/icn-storage/src/lib.rs
Size: 147 bytes
Modified: 2024-12-07 17:29:39.676957756 +0000
Dependencies:

===================
```rs
pub mod state;
pub mod error;
pub mod migrations;
pub mod storage;

pub use error::{StorageError, StorageResult};
pub use storage::StorageManager;
```

===================
File: ./crates/icn-crypto/src/lib.rs
Size: 177 bytes
Modified: 2024-12-07 10:51:04.870587319 +0000
Dependencies:
mod tests {

===================
```rs
//! ICN crypto crate

pub fn init() {
    println!("Initializing icn-crypto");
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
```

===================
File: ./crates/icn-types/src/lib.rs
Size: 678 bytes
Modified: 2024-12-07 11:09:57.996137179 +0000
Dependencies:
mod block;
mod identity;
mod relationship;
mod reputation;
mod transaction;

===================
```rs
mod block;
mod transaction;
mod identity;
mod relationship;
mod reputation;

pub use block::Block;
pub use transaction::{Transaction, TransactionType};
pub use identity::DID;
pub use relationship::{Relationship, RelationshipType};
pub use reputation::{ReputationSystem, ReputationContext, ReputationScore};

#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("Invalid data: {0}")]
    InvalidData(String),
    
    #[error("Crypto error: {0}")]
    CryptoError(String),
    
    #[error("Serialization error: {0}")]
    SerializationError(String),
}

pub type Result<T> = std::result::Result<T, Error>;

pub trait Validate {
    fn validate(&self) -> Result<()>;
}
```

===================
File: ./crates/icn-p2p/src/lib.rs
Size: 56 bytes
Modified: 2024-12-07 10:58:37.661642490 +0000
Dependencies:
use icn_types::*;

===================
```rs
pub mod protocol;
pub mod websocket;

use icn_types::*;
```

===================
File: ./crates/icn-runtime/src/lib.rs
Size: 49 bytes
Modified: 2024-12-07 10:58:37.663642511 +0000
Dependencies:
use icn_types::*;

===================
```rs
pub mod vm;
pub mod executor;

use icn_types::*;
```

===================
File: ./crates/icn-consensus/src/lib.rs
Size: 812 bytes
Modified: 2024-12-07 17:28:52.373822510 +0000
Dependencies:
mod metrics;
use async_trait::async_trait;
use icn_types as types;

===================
```rs
pub mod proof_of_cooperation;
mod metrics;

use icn_types as types;
use async_trait::async_trait;

pub struct ConsensusConfig {
    pub min_validators: usize,
    pub round_timeout: std::time::Duration,
    pub threshold: f64,
}

impl Default for ConsensusConfig {
    fn default() -> Self {
        Self {
            min_validators: 3,
            round_timeout: std::time::Duration::from_secs(30),
            threshold: 0.66,
        }
    }
}

pub use proof_of_cooperation::ProofOfCooperation;
pub use metrics::ConsensusMetrics;

#[async_trait]
pub trait ConsensusEngine: Send + Sync {
    async fn start_round(&mut self) -> anyhow::Result<()>;
    async fn propose_block(&mut self, block: types::Block) -> anyhow::Result<()>;
    async fn verify_block(&self, block: &types::Block) -> anyhow::Result<()>;
}
```

===================
File: ./crates/icn-core/src/main.rs
Size: 1379 bytes
Modified: 2024-12-07 11:02:33.957705740 +0000
Dependencies:
use icn_consensus::{ConsensusConfig, ProofOfCooperation};
use icn_p2p::websocket::WebSocketHandler;
use icn_storage::state::StateManager;
use icn_types::*;
use std::sync::Arc;
use tokio::sync::RwLock;
use warp::Filter;

===================
```rs
use std::sync::Arc;
use tokio::sync::RwLock;
use warp::Filter;

use icn_types::*;
use icn_consensus::{ConsensusConfig, ProofOfCooperation};
use icn_p2p::websocket::WebSocketHandler;
use icn_storage::state::StateManager;

#[tokio::main]
async fn main() {
    // Initialize core systems
    let storage = Arc::new(StateManager::new().await);
    let ws_handler = Arc::new(WebSocketHandler::new());
    
    // Initialize consensus system
    let consensus = Arc::new(RwLock::new(ProofOfCooperation::new(
        ConsensusConfig::default(),
        ws_handler.clone(),
    )));

    // Define WebSocket route with DID header for user identification
    let ws_handler = ws_handler.clone();
    let ws_route = warp::path("ws")
        .and(warp::ws())
        .and(warp::header::<String>("X-DID"))
        .and(warp::any().map(move || ws_handler.clone()))
        .map(|ws: warp::ws::Ws, did: String, handler: Arc<WebSocketHandler>| {
            ws.on_upgrade(move |socket| async move {
                handler.handle_connection(socket, did).await;
            })
        });

    // Health check route
    let health_route = warp::path("health")
        .and(warp::get())
        .map(|| "OK");

    let routes = ws_route.or(health_route);

    println!("Starting WebSocket server on localhost:8088");
    warp::serve(routes)
        .run(([127, 0, 0, 1], 8088))
        .await;
}
```

===================
File: ./crates/icn-core/src/lib.rs
Size: 198 bytes
Modified: 2024-12-07 10:58:37.655642427 +0000
Dependencies:
use icn_consensus as consensus;
use icn_p2p as p2p;
use icn_runtime as runtime;
use icn_storage as storage;
use icn_types::*;

===================
```rs
pub mod api;
pub mod cooperative;
pub mod governance;
pub mod service;

use icn_types::*;
use icn_consensus as consensus;
use icn_storage as storage;
use icn_p2p as p2p;
use icn_runtime as runtime;
```


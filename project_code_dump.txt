Project Code Dump - Generated Sat Dec  7 10:33:35 UTC 2024
======================================

LLM Context Information
======================
This is a distributed cooperative network system with the following key components:

Core Components:
- Backend: Rust-based node implementation
- Frontend: TypeScript/React web interface
- Contracts: Smart contracts for cooperative governance

Architecture Overview:
- Blockchain: Handles consensus and state management
- Identity: DID-based identity management
- Relationship: Tracks member interactions and relationships
- Reputation: Manages trust and reputation scores
- Governance: Handles proposals and voting
- WebSocket: Real-time communication layer

File Organization:
- /backend/src/: Core Rust implementation
- /frontend/src/: React frontend application
- /contracts/: Smart contract implementations
- /docker/: Deployment configurations

======================

Project Tree:
=============
.
├── ICN.code-workspace
├── backend
│   ├── Cargo.lock
│   ├── Cargo.toml
│   ├── lib.rs,old
│   └── src
│       ├── api
│       ├── blockchain
│       ├── claims
│       ├── community
│       ├── config
│       ├── consensus
│       ├── cooperative
│       ├── governance
│       ├── identity
│       ├── lib.rs
│       ├── main.rs
│       ├── monitoring
│       ├── network
│       ├── relationship
│       ├── reputation
│       ├── state
│       ├── utils
│       ├── vm
│       └── websocket
├── contracts
│   ├── cooperative
│   │   └── src
│   └── governance
├── create_docs_dump.sh
├── docker
│   ├── backend.Dockerfile
│   ├── backend_new.Dockerfile
│   ├── docker-compose.yml
│   └── frontend.Dockerfile
├── frontend
│   ├── package.json
│   ├── src
│   │   ├── app
│   │   ├── components
│   │   ├── contexts
│   │   ├── hooks
│   │   ├── lib
│   │   └── styles
│   └── tsconfig.json
├── generate_code_dump.sh
├── improved-setup.sh
├── inventory_nodes.sh
├── project_code_dump.txt
├── project_docs_dump.txt
├── setup_and_run_script.sh
├── setup_docs.sh
├── setup_venv.sh
├── start_docs_server.sh
└── tools
    ├── README.md
    ├── activate-docs-env.sh
    ├── activate-docs-env.sh.bak
    ├── doctools
    │   ├── __init__.py
    │   ├── docmanager.py
    │   ├── docsctl
    │   ├── specgen.py
    │   └── venv
    ├── install_docsctl.sh
    └── requirements.txt

===================
File: ./backend/Cargo.toml
Size: 723 bytes
Modified: 2024-12-05 22:16:29.921464962 +0000

===================
```toml
[package]
name = "icn-backend"
version = "0.1.0"
edition = "2021"

[dependencies]
tokio = { version = "1.35.1", features = ["full"] }
thiserror = "1.0.50"
warp = "0.3.7"
tokio-tungstenite = { version = "0.21.0", features = ["native-tls"] }
url = "2.5.0"
http = "1.0.0"
serde = { version = "1.0.193", features = ["derive"] }
serde_json = "1.0.108"
chrono = { version = "0.4.38", features = ["serde"] }
uuid = { version = "1.11.0", features = ["v4"] }
futures = "0.3.31"
futures-util = "0.3.31"
rand = "0.8.5"
secp256k1 = { version = "0.24.3", features = ["rand"] }
sha2 = "0.10.8"

// Remove the [dev-dependencies] section entirely since these are already in main dependencies

[[bin]]
name = "icn-app" 
path = "src/main.rs"```

===================
File: ./backend/src/lib.rs
Size: 1723 bytes
Modified: 2024-12-05 21:57:38.922020627 +0000
Dependencies:
use chrono::{DateTime, Utc};
use std::collections::HashMap;
use std::sync::{Arc, Mutex};
use tokio::sync::broadcast;
use uuid;

===================
```rs
// src/lib.rs

pub mod api;
pub mod blockchain;
pub mod claims;
pub mod community;
pub mod consensus;
pub mod cooperative;
pub mod governance;
pub mod identity;
pub mod monitoring;
pub mod network;
pub mod relationship;
pub mod reputation;
pub mod state;  // New state module
pub mod utils;
pub mod vm;
pub mod websocket;

pub use blockchain::{Block, Blockchain, Transaction, TransactionType};
pub use consensus::{ProofOfCooperation, types::ConsensusConfig, types::ConsensusRound};
pub use governance::Proposal;
pub use identity::IdentitySystem;
pub use monitoring::energy::{EnergyAware, EnergyMonitor};
pub use relationship::{
    Contribution, 
    MutualAidInteraction, 
    RelationshipSystem,
    Relationship, 
    RelationshipType,
    Interaction,
    InteractionType,
    Endorsement
};
pub use reputation::ReputationSystem;
pub use vm::{Contract, ExecutionContext, VM};
pub use vm::cooperative_metadata::{CooperativeMetadata, ResourceImpact};
pub use websocket::WebSocketHandler;

use std::sync::{Arc, Mutex};
use std::collections::HashMap;
use tokio::sync::broadcast;
use uuid;
use chrono::{DateTime, Utc};

/// Events emitted by the ICN system
#[derive(Clone, Debug)]
pub enum SystemEvent {
    BlockCreated(Block),
    ProposalSubmitted(Proposal),
    VoteCast { proposal_id: u64, voter: String, vote: bool },
    ReputationChanged { did: String, change: i64, reason: String },
    ConsensusStarted(ConsensusRound),
    ConsensusFinished(Block),
    CooperativeCreated { id: String, creator: String },
    CooperativeJoined { id: String, member: String },
    ContributionRecorded(Contribution),
    MutualAidProvided(MutualAidInteraction),
    RelationshipUpdated { member_one: String, member_two: String },
}```

===================
File: ./backend/src/main.rs
Size: 2127 bytes
Modified: 2024-12-05 22:16:28.750308239 +0000
Dependencies:
use icn_backend::{
use std::sync::{Arc, Mutex};
use warp::Filter;

===================
```rs
// src/main.rs

use std::sync::{Arc, Mutex};
use warp::Filter;

// Import from the icn_backend library
use icn_backend::{
    blockchain::Blockchain,
    consensus::{ProofOfCooperation, types::ConsensusConfig},
    identity::IdentitySystem,
    relationship::RelationshipSystem, // Import the RelationshipSystem
    reputation::ReputationSystem,
    websocket::WebSocketHandler,
};

#[tokio::main]
async fn main() {
    // Initialize core systems
    let identity_system = Arc::new(Mutex::new(IdentitySystem::new()));
    let reputation_system = Arc::new(Mutex::new(ReputationSystem::new()));
    let relationship_system = Arc::new(Mutex::new(RelationshipSystem::new())); // Initialize the RelationshipSystem
    
    // Create WebSocket handler for real-time updates
    let ws_handler = Arc::new(WebSocketHandler::new());
    
    // Initialize consensus system
    let consensus = Arc::new(Mutex::new(ProofOfCooperation::new(
        ConsensusConfig::default(),
        ws_handler.clone(),
    )));

    // Initialize the blockchain with all required systems
    let blockchain = Arc::new(Mutex::new(Blockchain::new(
        identity_system.clone(),
        reputation_system.clone(),
        relationship_system.clone(), // Pass the relationship_system to the Blockchain constructor
        consensus.clone(),
    )));


    // Define WebSocket route with DID header for user identification
    let ws_handler = ws_handler.clone();
    let ws_route = warp::path("ws")
        .and(warp::ws())
        .and(warp::header::<String>("X-DID"))
        .and(warp::any().map(move || ws_handler.clone()))
        .map(|ws: warp::ws::Ws, did: String, handler: Arc<WebSocketHandler>| {
            ws.on_upgrade(move |socket| async move {
                handler.handle_connection(socket, did).await;
            })
        });

    // Health check route
    let health_route = warp::path("health")
        .and(warp::get())
        .map(|| "OK");

    let routes = ws_route.or(health_route);

    println!("Starting WebSocket server on localhost:8088");
    warp::serve(routes)
        .run(([127, 0, 0, 1], 8088))
        .await;
}```

===================
File: ./docker/docker-compose.yml
Size: 829 bytes
Modified: 2024-11-20 22:07:42.247802666 +0000

===================

===================
File: ./backend/src/main.rs
Size: 2127 bytes
Modified: 2024-12-05 22:16:28.750308239 +0000
Dependencies:
use icn_backend::{
use std::sync::{Arc, Mutex};
use warp::Filter;

===================
```rs
// src/main.rs

use std::sync::{Arc, Mutex};
use warp::Filter;

// Import from the icn_backend library
use icn_backend::{
    blockchain::Blockchain,
    consensus::{ProofOfCooperation, types::ConsensusConfig},
    identity::IdentitySystem,
    relationship::RelationshipSystem, // Import the RelationshipSystem
    reputation::ReputationSystem,
    websocket::WebSocketHandler,
};

#[tokio::main]
async fn main() {
    // Initialize core systems
    let identity_system = Arc::new(Mutex::new(IdentitySystem::new()));
    let reputation_system = Arc::new(Mutex::new(ReputationSystem::new()));
    let relationship_system = Arc::new(Mutex::new(RelationshipSystem::new())); // Initialize the RelationshipSystem
    
    // Create WebSocket handler for real-time updates
    let ws_handler = Arc::new(WebSocketHandler::new());
    
    // Initialize consensus system
    let consensus = Arc::new(Mutex::new(ProofOfCooperation::new(
        ConsensusConfig::default(),
        ws_handler.clone(),
    )));

    // Initialize the blockchain with all required systems
    let blockchain = Arc::new(Mutex::new(Blockchain::new(
        identity_system.clone(),
        reputation_system.clone(),
        relationship_system.clone(), // Pass the relationship_system to the Blockchain constructor
        consensus.clone(),
    )));


    // Define WebSocket route with DID header for user identification
    let ws_handler = ws_handler.clone();
    let ws_route = warp::path("ws")
        .and(warp::ws())
        .and(warp::header::<String>("X-DID"))
        .and(warp::any().map(move || ws_handler.clone()))
        .map(|ws: warp::ws::Ws, did: String, handler: Arc<WebSocketHandler>| {
            ws.on_upgrade(move |socket| async move {
                handler.handle_connection(socket, did).await;
            })
        });

    // Health check route
    let health_route = warp::path("health")
        .and(warp::get())
        .map(|| "OK");

    let routes = ws_route.or(health_route);

    println!("Starting WebSocket server on localhost:8088");
    warp::serve(routes)
        .run(([127, 0, 0, 1], 8088))
        .await;
}```

===================
File: ./backend/src/lib.rs
Size: 1723 bytes
Modified: 2024-12-05 21:57:38.922020627 +0000
Dependencies:
use chrono::{DateTime, Utc};
use std::collections::HashMap;
use std::sync::{Arc, Mutex};
use tokio::sync::broadcast;
use uuid;

===================
```rs
// src/lib.rs

pub mod api;
pub mod blockchain;
pub mod claims;
pub mod community;
pub mod consensus;
pub mod cooperative;
pub mod governance;
pub mod identity;
pub mod monitoring;
pub mod network;
pub mod relationship;
pub mod reputation;
pub mod state;  // New state module
pub mod utils;
pub mod vm;
pub mod websocket;

pub use blockchain::{Block, Blockchain, Transaction, TransactionType};
pub use consensus::{ProofOfCooperation, types::ConsensusConfig, types::ConsensusRound};
pub use governance::Proposal;
pub use identity::IdentitySystem;
pub use monitoring::energy::{EnergyAware, EnergyMonitor};
pub use relationship::{
    Contribution, 
    MutualAidInteraction, 
    RelationshipSystem,
    Relationship, 
    RelationshipType,
    Interaction,
    InteractionType,
    Endorsement
};
pub use reputation::ReputationSystem;
pub use vm::{Contract, ExecutionContext, VM};
pub use vm::cooperative_metadata::{CooperativeMetadata, ResourceImpact};
pub use websocket::WebSocketHandler;

use std::sync::{Arc, Mutex};
use std::collections::HashMap;
use tokio::sync::broadcast;
use uuid;
use chrono::{DateTime, Utc};

/// Events emitted by the ICN system
#[derive(Clone, Debug)]
pub enum SystemEvent {
    BlockCreated(Block),
    ProposalSubmitted(Proposal),
    VoteCast { proposal_id: u64, voter: String, vote: bool },
    ReputationChanged { did: String, change: i64, reason: String },
    ConsensusStarted(ConsensusRound),
    ConsensusFinished(Block),
    CooperativeCreated { id: String, creator: String },
    CooperativeJoined { id: String, member: String },
    ContributionRecorded(Contribution),
    MutualAidProvided(MutualAidInteraction),
    RelationshipUpdated { member_one: String, member_two: String },
}```


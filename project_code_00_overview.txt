# ICN Project - High-Level Overview
Generated: Mon Mar 10 03:56:41 UTC 2025
===============================================================

## Project Purpose and Architecture

This is a distributed cooperative network system (ICN) with a blockchain-based architecture implementing a cooperative governance model. The system is designed to facilitate trustless cooperation between network participants.

## Key Components

### Core Components
- **Backend**: Rust-based node implementation handling consensus, blockchain, and network operations
- **Frontend**: TypeScript/React web interface for user interaction
- **Contracts**: Smart contracts for cooperative governance and rule enforcement

### Service Layers
1. **Blockchain Layer**: Handles state management and consensus
2. **Identity Layer**: DID-based identity management for network participants
3. **Relationship Layer**: Tracks interactions and relationships between members
4. **Reputation Layer**: Manages trust and reputation scores in the network
5. **Governance Layer**: Handles proposals, voting, and rule enforcement
6. **Communication Layer**: WebSocket and P2P communication between nodes

## Directory Structure

- **/backend/**: Core Rust implementation of the node software
  - **/src/**: Source code for the backend
    - **/api/**: API endpoints and handlers
    - **/services/**: Core services implementation
    - **/network/**: Network communication code
    - **/blockchain/**: Blockchain implementation

- **/frontend/**: React-based web interface
  - **/src/**: TypeScript source code
    - **/components/**: UI components
    - **/services/**: Frontend services for API communication

- **/contracts/**: Smart contract implementations
  - Various contract modules with their own src directories

- **/src/**: Core shared codebase
  - **/api/**: API definitions
  - **/consensus/**: Consensus mechanism implementation
  - **/governance/**: Governance rules and voting mechanisms
  - **/identity/**: Identity management
  - **/dsl/**: Domain-specific language for governance rules
  - **/services/**: Shared services
  - **/storage/**: Data storage implementations

- **/identity/**, **/reputation/**, **/governance/**, etc.: Specialized modules for each system layer

## Key Technologies

- **Rust**: Primary backend language
- **TypeScript/React**: Frontend stack
- **Blockchain**: Custom implementation for consensus and state
- **WebSocket**: Real-time communication
- **Smart Contracts**: For governance and rule enforcement
- **DIDs (Decentralized Identifiers)**: For identity management

## Data Flow

1. Users interact with the system through the frontend
2. API requests are processed by backend handlers
3. Blockchain operations follow consensus rules
4. Identity and reputation scores affect governance decisions
5. Smart contracts enforce rules and handle automated processes
6. Events are propagated through the network via WebSocket/P2P

## Important Files

- **src/main.rs**: Entry point for the backend application
- **src/lib.rs**: Core library exports
- **backend/src/api/routes.rs**: API endpoint definitions
- **frontend/src/index.ts**: Frontend entry point
- **src/consensus/mod.rs**: Consensus implementation
- **src/governance/mod.rs**: Governance rules
- **src/dsl/**: Domain-specific language for rules
- **docker-compose.yml**: Container orchestration

## Dependencies and Requirements

The project relies on various Rust crates and NPM packages, with core dependencies being:
- Rust blockchain and cryptography libraries
- React and TypeScript for frontend
- WebSocket libraries for communication
- Database connectors for storage

## Build and Deployment

The system can be deployed as:
- Individual nodes in a distributed network
- Docker containers orchestrated with docker-compose
- Development setup with local components

## Notes for Analysis

When reviewing the code:
1. Focus on interaction between layers (identity, reputation, governance)
2. Pay attention to consensus mechanisms and validation rules
3. Understand the governance DSL and rule enforcement
4. Note how reputation scores influence system behavior


## Actual Project Structure
Below is the actual directory structure (simplified):
```
.
  .data
  .devcontainer
  .git
  .github
    workflows
  .logs
  .vscode
  backend
    benches
    migrations
    src
    tests
  bridges
    cross_chain
  config
  consensus
  contracts
    cooperative
  crates
    consensus
    core
    icn-cli
    icn-common
    icn-consensus
    icn-core
    icn-crypto
    icn-dsl
    icn-federation
    icn-governance
    icn-identity
    icn-mutual-credit
    icn-p2p
    icn-reputation
    icn-resource
    icn-runtime
    icn-storage
    icn-types
    icn-zk
    networking
    storage
    zk_snarks
  data
    bootstrap
    db
    validator1
    validator2
  docker
    backend
    frontend
    init-db
  docs
    api
    architecture
    deployment
    development
    guides
    specifications
    templates
    user
  examples
  federation
  frontend
    build
    node_modules
    public
    src
  fsprovider-sample
    src
  grammar
  helm
    icn-backend
  icn-consensus
    src
  icn-core
    src
  identity
    tests
  k8s
    production
    staging
  logs
  messaging
  node_modules
  prototype
    __tests__
    config
    dashboard
    data
    logs
    node_modules
    scripts
    src
  reputation
  scripts
    backend
    frontend
  src
    api
    attestation
    blockchain
    consensus
    dsl
    federation
    governance
    identity
    network
    services
    storage
  target
  tests
    a11y
    load_tests
  tools
    doctools
```

## Key Files by Component

Below are key files from the codebase:
```
./backend/src/main.rs
./crates/icn-cli/src/main.rs
./docker/backend/src/main.rs
./scripts/backend/src/main.rs
./src/main.rs
./backend/src/lib.rs
./contracts/cooperative/src/lib.rs
./crates/icn-cli/src/lib.rs
./crates/icn-common/src/lib.rs
./crates/icn-consensus/src/lib.rs
./crates/icn-core/src/lib.rs
./crates/icn-crypto/src/lib.rs
./crates/icn-dsl/src/lib.rs
./crates/icn-federation/src/lib.rs
./crates/icn-governance/src/lib.rs
./crates/icn-identity/src/lib.rs
./crates/icn-mutual-credit/src/lib.rs
./crates/icn-p2p/src/lib.rs
./crates/icn-reputation/src/lib.rs
./crates/icn-resource/src/lib.rs
./crates/icn-runtime/src/lib.rs
./crates/icn-storage/src/lib.rs
./crates/icn-types/src/lib.rs
./crates/icn-zk/src/lib.rs
./crates/zk_snarks/src/lib.rs
./icn-consensus/src/lib.rs
./src/lib.rs
./backend/src/main.rs
./docker/backend/src/main.rs
./scripts/backend/src/main.rs
./frontend/src/index.tsx
./backend/src/api/mod.rs
./src/api/mod.rs
./backend/src/api/routes.rs
./src/api/routes.rs
./src/consensus/mod.rs
./crates/icn-core/src/identity/mod.rs
./src/governance/mod.rs
./crates/icn-core/src/reputation/mod.rs
./src/dsl/mod.rs
./Cargo.toml
./backend/Cargo.toml
./contracts/Cargo.toml
./crates/consensus/Cargo.toml
./crates/core/Cargo.toml
./crates/icn-cli/Cargo.toml
./crates/icn-common/Cargo.toml
./crates/icn-consensus/Cargo.toml
./crates/icn-core/Cargo.toml
./crates/icn-crypto/Cargo.toml
./crates/icn-dsl/Cargo.toml
./crates/icn-federation/Cargo.toml
./crates/icn-governance/Cargo.toml
./crates/icn-identity/Cargo.toml
./crates/icn-mutual-credit/Cargo.toml
./crates/icn-p2p/Cargo.toml
./crates/icn-reputation/Cargo.toml
./crates/icn-resource/Cargo.toml
./crates/icn-runtime/Cargo.toml
./crates/icn-storage/Cargo.toml
./crates/icn-types/Cargo.toml
./crates/icn-zk/Cargo.toml
./crates/networking/Cargo.toml
./crates/storage/Cargo.toml
./crates/zk_snarks/Cargo.toml
./docker/backend/Cargo.toml
./docker/frontend/frontend/frontend/backend/Cargo.toml
./frontend/Cargo.toml
./docker/frontend/frontend/frontend/package.json
./docker/frontend/package.json
./frontend/package.json
./fsprovider-sample/package.json
./package.json
./prototype/package.json
./scripts/frontend/package.json
./.devcontainer/docker-compose.yml
./docker/docker-compose.yml
./prototype/docker-compose.yml
```

## Component Relationships

Below is a textual representation of how the components interact:

User → Frontend UI → API Endpoints → Backend Services
                                   ↓
       ┌─────────────────────────────────────────┐
       ↓                                         ↓
    Identity ←→ Relationship ←→ Reputation  Blockchain
       ↑          ↑               ↑             ↑
       └──────────┼───────────────┘             │
                  ↓                             ↓
              Governance ←────────────→ Smart Contracts
                  ↓
              Consensus
              
Communication Layer (WebSockets/P2P) connects all components

